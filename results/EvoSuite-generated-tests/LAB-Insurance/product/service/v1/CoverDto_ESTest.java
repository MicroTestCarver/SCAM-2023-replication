/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 14:44:13 GMT 2023
 */

package pl.altkom.asc.lab.micronaut.poc.product.service.v1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.math.BigDecimal;
import pl.altkom.asc.lab.micronaut.poc.product.service.api.v1.CoverDto;

public class CoverDto_ESTest {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOptionalReturningTrue()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CoverDto coverDto0 = new CoverDto(":", "AOw&, YVC`,", "(", true, bigDecimal0);
      boolean boolean0 = coverDto0.isOptional();
      assertEquals(":", coverDto0.getCode());
      assertEquals("AOw&, YVC`,", coverDto0.getName());
      assertEquals("(", coverDto0.getDescription());
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSumInsuredReturningNull()  throws Throwable  {
      CoverDto coverDto0 = new CoverDto();
      BigDecimal bigDecimal0 = coverDto0.getSumInsured();
      assertNull(bigDecimal0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSumInsuredReturningBigDecimalWhereByteValueIsZero()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CoverDto coverDto0 = new CoverDto(":", "AOw&, YVC`,", "(", true, bigDecimal0);
      coverDto0.getSumInsured();
      assertEquals(":", coverDto0.getCode());
      assertEquals("(", coverDto0.getDescription());
      assertTrue(coverDto0.isOptional());
      assertEquals("AOw&, YVC`,", coverDto0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSumInsuredReturningBigDecimalWhereByteValueIsPositive()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CoverDto coverDto0 = new CoverDto("|UaE/9", "|UaE/9", "", false, bigDecimal0);
      coverDto0.getSumInsured();
      assertFalse(coverDto0.isOptional());
      assertEquals("|UaE/9", coverDto0.getCode());
      assertEquals("|UaE/9", coverDto0.getName());
      assertEquals("", coverDto0.getDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull()  throws Throwable  {
      CoverDto coverDto0 = new CoverDto();
      String string0 = coverDto0.getName();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1150L));
      CoverDto coverDto0 = new CoverDto("", "|", "|", true, bigDecimal0);
      String string0 = coverDto0.getName();
      assertTrue(coverDto0.isOptional());
      assertEquals("", coverDto0.getCode());
      assertEquals("|", string0);
      assertEquals("|", coverDto0.getDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescriptionReturningNull()  throws Throwable  {
      CoverDto coverDto0 = new CoverDto();
      String string0 = coverDto0.getDescription();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescriptionReturningNonEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1150L));
      CoverDto coverDto0 = new CoverDto("", "|", "|", true, bigDecimal0);
      String string0 = coverDto0.getDescription();
      assertEquals("|", coverDto0.getName());
      assertEquals("|", string0);
      assertEquals("", coverDto0.getCode());
      assertTrue(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1150L));
      CoverDto coverDto0 = new CoverDto("", "|", "|", true, bigDecimal0);
      String string0 = coverDto0.getCode();
      assertEquals("", string0);
      assertEquals("|", coverDto0.getName());
      assertEquals("|", coverDto0.getDescription());
      assertTrue(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSumInsuredReturningBigDecimalWhereByteValueIsNegative()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1150L));
      CoverDto coverDto0 = new CoverDto("", "|", "|", true, bigDecimal0);
      coverDto0.getSumInsured();
      assertEquals("", coverDto0.getCode());
      assertEquals("|", coverDto0.getName());
      assertEquals("|", coverDto0.getDescription());
      assertTrue(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CoverDto coverDto0 = new CoverDto("", "", "", true, bigDecimal0);
      coverDto0.getName();
      assertTrue(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNull()  throws Throwable  {
      CoverDto coverDto0 = new CoverDto();
      String string0 = coverDto0.getCode();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescriptionReturningEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CoverDto coverDto0 = new CoverDto("", "", "", true, bigDecimal0);
      coverDto0.getDescription();
      assertTrue(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNonEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0.0);
      CoverDto coverDto0 = new CoverDto("s]", "j@", "$Hv}", false, bigDecimal0);
      String string0 = coverDto0.getCode();
      assertEquals("s]", string0);
      assertEquals("j@", coverDto0.getName());
      assertEquals("$Hv}", coverDto0.getDescription());
      assertFalse(coverDto0.isOptional());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOptionalReturningFalse()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CoverDto coverDto0 = new CoverDto("|UaE/9", "|UaE/9", "", false, bigDecimal0);
      boolean boolean0 = coverDto0.isOptional();
      assertFalse(boolean0);
      assertEquals("", coverDto0.getDescription());
      assertEquals("|UaE/9", coverDto0.getCode());
      assertEquals("|UaE/9", coverDto0.getName());
  }
}
