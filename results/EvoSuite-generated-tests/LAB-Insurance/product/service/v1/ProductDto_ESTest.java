/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 14:43:12 GMT 2023
 */

package pl.altkom.asc.lab.micronaut.poc.product.service.v1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import pl.altkom.asc.lab.micronaut.poc.product.service.api.v1.CoverDto;
import pl.altkom.asc.lab.micronaut.poc.product.service.api.v1.ProductDto;
import pl.altkom.asc.lab.micronaut.poc.product.service.api.v1.questions.QuestionDto;

public class ProductDto_ESTest{

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQuestionsReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero()  throws Throwable  {
      ArrayList<CoverDto> arrayList0 = new ArrayList<CoverDto>();
      Vector<QuestionDto> vector0 = new Vector<QuestionDto>();
      ProductDto productDto0 = new ProductDto("io.reactivex.internal.operators.maybe.MaybeCreate", "dP:<qqAIFG-CZNi;A", "", "frn", arrayList0, vector0, 0, (String) null);
      productDto0.getQuestions();
      assertEquals("dP:<qqAIFG-CZNi;A", productDto0.getName());
      assertEquals(0, productDto0.getMaxNumberOfInsured());
      assertEquals("io.reactivex.internal.operators.maybe.MaybeCreate", productDto0.getCode());
      assertEquals("frn", productDto0.getDescription());
      assertEquals("", productDto0.getImage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQuestionsReturningListWhereIsEmptyIsFalse()  throws Throwable  {
      Vector<CoverDto> vector0 = new Vector<CoverDto>();
      Stack<QuestionDto> stack0 = new Stack<QuestionDto>();
      ProductDto productDto0 = new ProductDto(", maxNumberOfInsured=", "3:Z5se", ", maxNumberOfInsured=", ", maxNumberOfInsured=", vector0, stack0, (-1), "");
      QuestionDto questionDto0 = new QuestionDto();
      stack0.add(questionDto0);
      List<QuestionDto> list0 = productDto0.getQuestions();
      assertEquals("", productDto0.getIcon());
      assertEquals((-1), productDto0.getMaxNumberOfInsured());
      assertEquals("3:Z5se", productDto0.getName());
      assertEquals(", maxNumberOfInsured=", productDto0.getDescription());
      assertEquals(", maxNumberOfInsured=", productDto0.getCode());
      assertTrue(list0.contains(questionDto0));
      assertEquals(", maxNumberOfInsured=", productDto0.getImage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString()  throws Throwable  {
      LinkedList<CoverDto> linkedList0 = new LinkedList<CoverDto>();
      QuestionDto questionDto0 = new QuestionDto();
      List<QuestionDto> list0 = new ArrayList<>();
      list0.add(questionDto0);
      ProductDto productDto0 = new ProductDto("", ", maxNumberOfInsured=", "7JTq\u0003tm]", "", linkedList0, list0, 1780, "");
      String string0 = productDto0.getName();
      assertEquals(", maxNumberOfInsured=", string0);
      assertEquals("", productDto0.getCode());
      assertEquals(1780, productDto0.getMaxNumberOfInsured());
      assertEquals("", productDto0.getDescription());
      assertEquals("", productDto0.getIcon());
      assertEquals("7JTq\u0003tm]", productDto0.getImage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString()  throws Throwable  {
      ArrayList<CoverDto> arrayList0 = new ArrayList<CoverDto>();
      Stack<QuestionDto> stack0 = new Stack<QuestionDto>();
      ProductDto productDto0 = new ProductDto("r]'iy{P}cM9$0", "", (String) null, "", arrayList0, stack0, 1, "");
      String string0 = productDto0.getName();
      assertEquals("", string0);
      assertEquals("", productDto0.getIcon());
      assertNotNull(string0);
      assertEquals("", productDto0.getDescription());
      assertEquals("r]'iy{P}cM9$0", productDto0.getCode());
      assertEquals(1, productDto0.getMaxNumberOfInsured());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxNumberOfInsuredReturningZero()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto productDto0 = productDto_ProductDtoBuilder0.build();
      int int0 = productDto0.getMaxNumberOfInsured();
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxNumberOfInsuredReturningPositive()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder1 = productDto_ProductDtoBuilder0.maxNumberOfInsured(1035);
      ProductDto productDto0 = productDto_ProductDtoBuilder1.build();
      int int0 = productDto0.getMaxNumberOfInsured();
      assertEquals(1035, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetImageReturningNonEmptyString()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder1 = productDto_ProductDtoBuilder0.image(")");
      ProductDto productDto0 = productDto_ProductDtoBuilder1.build();
      String string0 = productDto0.getImage();
      assertNotNull(string0);
      assertEquals(0, productDto0.getMaxNumberOfInsured());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetImageReturningEmptyString()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder1 = productDto_ProductDtoBuilder0.image("");
      ProductDto productDto0 = productDto_ProductDtoBuilder1.build();
      String string0 = productDto0.getImage();
      assertNotNull(string0);
      assertEquals(0, productDto0.getMaxNumberOfInsured());
  }


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIconReturningEmptyString()  throws Throwable  {
      LinkedList<CoverDto> linkedList0 = new LinkedList<CoverDto>();
      QuestionDto questionDto0 = new QuestionDto();
      List<QuestionDto> list0 = new ArrayList<>();
      list0.add(questionDto0);
      ProductDto productDto0 = new ProductDto("", ", maxNumberOfInsured=", "7JTq\u0003tm]", "", linkedList0, list0, 1780, "");
      String string0 = productDto0.getIcon();
      assertEquals("7JTq\u0003tm]", productDto0.getImage());
      assertEquals("", productDto0.getDescription());
      assertEquals("", productDto0.getCode());
      assertEquals(1780, productDto0.getMaxNumberOfInsured());
      assertEquals(", maxNumberOfInsured=", productDto0.getName());
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescriptionReturningNull()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto productDto0 = productDto_ProductDtoBuilder0.build();
      productDto0.getDescription();
      assertEquals(0, productDto0.getMaxNumberOfInsured());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescriptionReturningNonEmptyString()  throws Throwable  {
      QuestionDto questionDto0 = new QuestionDto("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (-1), ", disposed!");
      List<QuestionDto> list0 = new ArrayList<>();
      list0.add(questionDto0);
      ProductDto productDto0 = new ProductDto("application/hal+xml", "application/hal+xml", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (List<CoverDto>) null, list0, (-1), ", disposed!");
      String string0 = productDto0.getDescription();
      assertEquals(", disposed!", productDto0.getIcon());
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", productDto0.getImage());
      assertEquals("application/hal+xml", productDto0.getName());
      assertEquals("application/hal+xml", productDto0.getCode());
      assertEquals((-1), productDto0.getMaxNumberOfInsured());
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCoversReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero()  throws Throwable  {
      ArrayList<CoverDto> arrayList0 = new ArrayList<CoverDto>();
      Vector<QuestionDto> vector0 = new Vector<QuestionDto>();
      ProductDto productDto0 = new ProductDto("io.reactivex.internal.operators.maybe.MaybeCreate", "dP:<qqAIFG-CZNi;A", "", "frn", arrayList0, vector0, 0, (String) null);
      productDto0.getCovers();
      assertEquals("dP:<qqAIFG-CZNi;A", productDto0.getName());
      assertEquals(0, productDto0.getMaxNumberOfInsured());
      assertEquals("", productDto0.getImage());
      assertEquals("frn", productDto0.getDescription());
      assertEquals("io.reactivex.internal.operators.maybe.MaybeCreate", productDto0.getCode());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCoversReturningListWhereIsEmptyIsFalse()  throws Throwable  {
      Vector<CoverDto> vector0 = new Vector<CoverDto>();
      Stack<QuestionDto> stack0 = new Stack<QuestionDto>();
      CoverDto coverDto0 = new CoverDto();
      vector0.add(coverDto0);
      ProductDto productDto0 = new ProductDto(", maxNumberOfInsured=", "3:Z5se", ", maxNumberOfInsured=", ", maxNumberOfInsured=", vector0, stack0, (-1), "");
      List<CoverDto> list0 = productDto0.getCovers();
      assertEquals("3:Z5se", productDto0.getName());
      assertEquals("", productDto0.getIcon());
      assertEquals((-1), productDto0.getMaxNumberOfInsured());
      assertTrue(list0.contains(coverDto0));
      assertEquals(", maxNumberOfInsured=", productDto0.getDescription());
      assertEquals(", maxNumberOfInsured=", productDto0.getCode());
      assertEquals(", maxNumberOfInsured=", productDto0.getImage());
  }


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNonEmptyString()  throws Throwable  {
      QuestionDto questionDto0 = new QuestionDto("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (-1), ", disposed!");
      QuestionDto questionDto1 = new QuestionDto();
      List<QuestionDto> list0 = new ArrayList<>();
      list0.add(questionDto0);
      ProductDto productDto0 = new ProductDto("application/hal+xml", "application/hal+xml", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (List<CoverDto>) null, list0, (-1), ", disposed!");
      String string0 = productDto0.getCode();
      assertEquals("application/hal+xml", string0);
      
      int int0 = productDto0.getMaxNumberOfInsured();
      assertEquals("application/hal+xml", productDto0.getName());
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", productDto0.getImage());
      assertEquals(", disposed!", productDto0.getIcon());
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", productDto0.getDescription());
      assertEquals((-1), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testQuestions()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      Stack<QuestionDto> stack0 = new Stack<QuestionDto>();
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder1 = productDto_ProductDtoBuilder0.questions(stack0);
      assertSame(productDto_ProductDtoBuilder0, productDto_ProductDtoBuilder1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNull()  throws Throwable  {
      ProductDto.ProductDtoBuilder productDto_ProductDtoBuilder0 = ProductDto.builder();
      ProductDto productDto0 = productDto_ProductDtoBuilder0.build();
      productDto0.getCode();
      assertEquals(0, productDto0.getMaxNumberOfInsured());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesProductDtoTakingNoArguments()  throws Throwable  {
      ProductDto productDto0 = new ProductDto();
      assertNull(productDto0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIconReturningNonEmptyString()  throws Throwable  {
      QuestionDto questionDto0 = new QuestionDto("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (-1), ", disposed!");
      List<QuestionDto> list0 = new ArrayList<>();
      list0.add(questionDto0);
      ProductDto productDto0 = new ProductDto("application/hal+xml", "application/hal+xml", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", "io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", (List<CoverDto>) null, list0, (-1), ", disposed!");
      List<QuestionDto> list1 = productDto0.getQuestions();
      assertNotNull(list1);
      
      String string0 = productDto0.getIcon();
      assertEquals(", disposed!", string0);
      
      int int0 = productDto0.getMaxNumberOfInsured();
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", productDto0.getDescription());
      assertEquals("application/hal+xml", productDto0.getName());
      assertEquals("application/hal+xml", productDto0.getCode());
      assertEquals((-1), int0);
      assertEquals("io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable", productDto0.getImage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCoversReturningNullAndGetDescriptionReturningEmptyString()  throws Throwable  {
      ProductDto productDto0 = new ProductDto("", (String) null, (String) null, "", (List<CoverDto>) null, (List<QuestionDto>) null, 69, "2(J]!&ykW;*");
      String string0 = productDto0.getDescription();
      assertNotNull(string0);
      assertEquals("", string0);
      
      productDto0.getCovers();
      assertEquals("2(J]!&ykW;*", productDto0.getIcon());
      assertEquals("", productDto0.getCode());
      assertEquals(69, productDto0.getMaxNumberOfInsured());
  }
}
