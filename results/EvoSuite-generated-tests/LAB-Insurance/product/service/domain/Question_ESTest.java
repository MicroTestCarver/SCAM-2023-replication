/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 14:52:53 GMT 2023
 */

package pl.altkom.asc.lab.micronaut.poc.product.service.domain;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;

public class Question_ESTest {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTextReturningNull()  throws Throwable  {
      Question question0 = new Question();
      String string0 = question0.getText();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTextReturningNonEmptyString()  throws Throwable  {
      Question question0 = new Question("tV&T$PzB[5", 1922, "L{S");
      String string0 = question0.getText();
      assertEquals("tV&T$PzB[5", question0.getCode());
      assertEquals(1922, question0.getIndex());
      assertEquals("L{S", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIndexReturningZero()  throws Throwable  {
      Question question0 = new Question();
      int int0 = question0.getIndex();
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIndexReturningPositive()  throws Throwable  {
      Question question0 = new Question("tV&T$PzB[5", 1922, "L{S");
      int int0 = question0.getIndex();
      assertEquals("tV&T$PzB[5", question0.getCode());
      assertEquals("L{S", question0.getText());
      assertEquals(1922, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNonEmptyString()  throws Throwable  {
      Question question0 = new Question("tV&T$PzB[5", 1922, "L{S");
      String string0 = question0.getCode();
      assertEquals("L{S", question0.getText());
      assertEquals("tV&T$PzB[5", string0);
      assertEquals(1922, question0.getIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIndexReturningNegative()  throws Throwable  {
      Question question0 = new Question("", (-1), "");
      int int0 = question0.getIndex();
      assertEquals((-1), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNull()  throws Throwable  {
      Question question0 = new Question();
      String string0 = question0.getCode();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningEmptyString()  throws Throwable  {
      Question question0 = new Question("", (-1), "");
      question0.getCode();
      assertEquals((-1), question0.getIndex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTextReturningEmptyString()  throws Throwable  {
      Question question0 = new Question("", (-1), "");
      question0.getText();
      assertEquals((-1), question0.getIndex());
  }
}
