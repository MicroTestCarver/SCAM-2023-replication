/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 15:18:05 GMT 2023
 */

package pl.altkom.asc.lab.micronaut.poc.pricing.service.api.v1.commands.calculateprice;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class CalculatePriceResult_ESTest {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalPriceReturningBigDecimalWhereByteValueIsZero()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      calculatePriceResult0.setTotalPrice(bigDecimal0);
      BigDecimal bigDecimal1 = calculatePriceResult0.getTotalPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesCalculatePriceResultTaking2Arguments()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2381));
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      hashMap0.put("", bigDecimal0);
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult(bigDecimal0, hashMap0);
      Map<String, BigDecimal> map0 = calculatePriceResult0.getCoversPrices();
      assertFalse(map0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEmpty()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = CalculatePriceResult.empty();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      calculatePriceResult0.setTotalPrice(bigDecimal0);
      BigDecimal bigDecimal1 = calculatePriceResult0.getTotalPrice();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalPriceReturningNull()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult();
      BigDecimal bigDecimal0 = calculatePriceResult0.getTotalPrice();
      assertNull(bigDecimal0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCoversPricesReturningNull()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult();
      Map<String, BigDecimal> map0 = calculatePriceResult0.getCoversPrices();
      assertNull(map0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalPriceReturningBigDecimalWhereByteValueIsNegative()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult();
      BigDecimal bigDecimal0 = new BigDecimal((-1369L));
      calculatePriceResult0.setTotalPrice(bigDecimal0);
      BigDecimal bigDecimal1 = calculatePriceResult0.getTotalPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCoversPrices()  throws Throwable  {
      CalculatePriceResult calculatePriceResult0 = new CalculatePriceResult();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      calculatePriceResult0.setCoversPrices(hashMap0);
      Map<String, BigDecimal> map0 = calculatePriceResult0.getCoversPrices();
      assertTrue(map0.isEmpty());
  }
}
