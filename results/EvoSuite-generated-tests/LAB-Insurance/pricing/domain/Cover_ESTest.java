/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 15:23:00 GMT 2023
 */

package pl.altkom.asc.lab.micronaut.poc.pricing.domain;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.math.BigDecimal;
import java.math.BigInteger;
import pl.altkom.asc.lab.micronaut.poc.pricing.domain.Cover;

public class Cover_ESTest  {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPriceReturningNull()  throws Throwable  {
      Cover cover0 = new Cover("8XEI|)1n", (BigDecimal) null);
      BigDecimal bigDecimal0 = cover0.getPrice();
      assertNull(bigDecimal0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPriceReturningBigDecimalWhereByteValueIsPositive()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1748));
      Cover cover0 = new Cover("", bigDecimal0);
      BigDecimal bigDecimal1 = cover0.getPrice();
      assertEquals((byte)44, bigDecimal1.byteValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPriceReturningBigDecimalWhereByteValueIsZero()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Cover cover0 = new Cover((String) null, bigDecimal0);
      BigDecimal bigDecimal1 = cover0.getPrice();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPriceReturningBigDecimalWhereByteValueIsNegative()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(414L);
      Cover cover0 = new Cover("?%Uxpc:hS", bigDecimal0);
      BigDecimal bigDecimal1 = cover0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNull()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Cover cover0 = new Cover((String) null, bigDecimal0);
      String string0 = cover0.getCode();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningEmptyString()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1748));
      Cover cover0 = new Cover("", bigDecimal0);
      String string0 = cover0.getCode();
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNonEmptyString()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Cover cover0 = new Cover("vviM", bigDecimal0);
      String string0 = cover0.getCode();
      assertEquals("vviM", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPrice()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Cover cover0 = new Cover("vviM", bigDecimal0);
      cover0.setPrice(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }
}
