/**
 * Scaffolding file used to store all the setups needed to run
 * tests automatically generated by EvoSuite
 * Wed Nov 02 13:48:03 GMT 2022
 */

package org.springframework.samples.petclinic.evosuite.vet;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class Vet_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) System.getProperties().clone();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() {
    org.evosuite.runtime.RuntimeSettings.className = "org.springframework.samples.petclinic.vet.Vet";
    org.evosuite.runtime.GuiSupport.initialize();
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100;
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000;
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true;
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED;
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT();
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime();
  }

  @AfterClass
  public static void clearEvoSuiteFramework(){
    Sandbox.resetDefaultSecurityManager();
    System.setProperties((java.util.Properties) defaultProperties.clone());
  }

  @Before
  public void initTestCase(){
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler();
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode();
    setSystemProperties();
    org.evosuite.runtime.GuiSupport.setHeadless();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime();
    org.evosuite.runtime.agent.InstrumentingAgent.activate();
  }

  @After
  public void doneWithTestCase(){
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks();
    org.evosuite.runtime.classhandling.JDKClassResetter.reset();
    resetClasses();
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate();
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode();
  }

  public static void setSystemProperties() {

    System.setProperties((java.util.Properties) defaultProperties.clone());
    System.setProperty("user.dir", "/Users/Software Development/Web Development/Clonned Projects/spring-petclinic");
    System.setProperty("java.io.tmpdir", "/var/folders/yc/kykqf2wd0tgdw_85fbvlyj680000gn/T/");
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Vet_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler",
      "org.springframework.util.ReflectionUtils$FieldFilter",
      "org.springframework.core.convert.ConversionFailedException",
      "org.springframework.beans.PropertyEditorRegistrySupport",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.beans.PropertyEditorRegistry",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.beans.BeanWrapperImpl",
      "org.springframework.samples.petclinic.vet.Specialty",
      "org.springframework.core.io.support.PropertiesLoaderUtils",
      "org.springframework.beans.PropertyBatchUpdateException",
      "org.springframework.core.MethodParameter",
      "org.springframework.beans.AbstractNestablePropertyAccessor",
      "org.springframework.beans.TypeConverter",
      "org.springframework.core.io.support.SpringFactoriesLoader",
      "org.springframework.core.ResolvableType",
      "org.springframework.core.SpringProperties",
      "org.springframework.core.GenericTypeResolver",
      "org.springframework.core.io.Resource",
      "org.springframework.beans.support.MutableSortDefinition",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.util.ClassUtils",
      "org.springframework.beans.CachedIntrospectionResults",
      "org.springframework.samples.petclinic.model.NamedEntity",
      "org.springframework.core.convert.ConversionException",
      "org.springframework.beans.MethodInvocationException",
      "org.springframework.beans.BeanInfoFactory",
      "org.springframework.beans.TypeMismatchException",
      "org.springframework.util.PropertiesPersister",
      "org.springframework.beans.TypeConverterSupport",
      "org.springframework.core.SerializableTypeWrapper$TypeProvider",
      "org.springframework.util.CollectionUtils",
      "org.springframework.beans.GenericTypeAwarePropertyDescriptor",
      "org.springframework.core.io.InputStreamSource",
      "org.springframework.core.ResolvableType$VariableResolver",
      "org.springframework.beans.AbstractPropertyAccessor",
      "org.springframework.beans.NotWritablePropertyException",
      "org.springframework.beans.PropertyValues",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider",
      "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "org.springframework.samples.petclinic.vet.Vet",
      "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference",
      "org.springframework.util.ConcurrentReferenceHashMap$Entry",
      "org.springframework.core.io.UrlResource",
      "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider",
      "org.springframework.beans.BeanWrapper",
      "org.springframework.beans.PropertyAccessorUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
      "org.springframework.core.BridgeMethodResolver",
      "org.springframework.beans.PropertyAccessor",
      "org.springframework.core.convert.ConverterNotFoundException",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.core.io.AbstractFileResolvingResource",
      "org.springframework.core.KotlinDetector",
      "org.springframework.beans.support.PropertyComparator",
      "org.springframework.core.NativeDetector",
      "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyTokenHolder",
      "org.springframework.core.SerializableTypeWrapper$SerializableTypeProxy",
      "org.springframework.core.ResolvableType$EmptyType",
      "org.springframework.beans.TypeConverterDelegate",
      "org.springframework.beans.ConversionNotSupportedException",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.samples.petclinic.model.BaseEntity",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.beans.PropertyAccessException",
      "org.springframework.beans.FatalBeanException",
      "org.springframework.core.ResolvableType$DefaultVariableResolver",
      "org.springframework.util.ObjectUtils",
      "org.springframework.beans.InvalidPropertyException",
      "org.springframework.util.MultiValueMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "org.springframework.beans.BeansException",
      "org.springframework.core.NestedIOException",
      "org.springframework.beans.support.SortDefinition",
      "org.springframework.core.OrderComparator",
      "org.springframework.core.io.AbstractResource",
      "org.springframework.util.ResourceUtils",
      "org.springframework.core.SerializableTypeWrapper",
      "org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler",
      "org.springframework.samples.petclinic.model.Person",
      "org.springframework.util.ReflectionUtils$MethodFilter",
      "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler",
      "org.springframework.core.ResolvableType$1",
      "org.springframework.util.ReflectionUtils",
      "org.springframework.beans.ConfigurablePropertyAccessor",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.beans.NotReadablePropertyException",
      "org.springframework.util.StringUtils",
      "org.springframework.beans.NullValueInNestedPathException",
      "org.springframework.util.Assert"
    );
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Vet_ESTest_scaffolding.class.getClassLoader());

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.samples.petclinic.model.BaseEntity",
      "org.springframework.samples.petclinic.model.Person",
      "org.springframework.samples.petclinic.vet.Vet",
      "org.springframework.samples.petclinic.model.NamedEntity",
      "org.springframework.samples.petclinic.vet.Specialty",
      "org.springframework.beans.support.MutableSortDefinition",
      "org.springframework.beans.support.PropertyComparator",
      "org.springframework.util.StringUtils",
      "org.springframework.core.SpringProperties",
      "org.springframework.beans.PropertyEditorRegistrySupport",
      "org.springframework.beans.TypeConverterSupport",
      "org.springframework.beans.AbstractPropertyAccessor",
      "org.springframework.beans.AbstractNestablePropertyAccessor",
      "org.springframework.beans.BeanWrapperImpl",
      "org.springframework.beans.TypeConverterDelegate",
      "org.springframework.util.ObjectUtils",
      "org.springframework.util.Assert",
      "org.springframework.beans.PropertyAccessorUtils",
      "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyTokenHolder",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.core.io.support.SpringFactoriesLoader",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.springframework.core.io.AbstractResource",
      "org.springframework.core.io.AbstractFileResolvingResource",
      "org.springframework.core.io.UrlResource",
      "org.springframework.core.io.support.PropertiesLoaderUtils",
      "org.springframework.util.ResourceUtils",
      "org.springframework.util.CollectionUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
      "org.springframework.util.ConcurrentReferenceHashMap$Entry",
      "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference",
      "org.springframework.core.OrderComparator",
      "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "org.springframework.beans.CachedIntrospectionResults",
      "org.springframework.beans.GenericTypeAwarePropertyDescriptor",
      "org.springframework.core.BridgeMethodResolver",
      "org.springframework.util.ClassUtils",
      "org.springframework.core.GenericTypeResolver",
      "org.springframework.core.ResolvableType$EmptyType",
      "org.springframework.core.ResolvableType",
      "org.springframework.core.MethodParameter",
      "org.springframework.core.ResolvableType$DefaultVariableResolver",
      "org.springframework.core.SerializableTypeWrapper$MethodParameterTypeProvider",
      "org.springframework.core.SerializableTypeWrapper",
      "org.springframework.core.KotlinDetector",
      "org.springframework.core.NativeDetector",
      "org.springframework.core.SerializableTypeWrapper$TypeProxyInvocationHandler",
      "org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider",
      "org.springframework.util.ReflectionUtils",
      "org.springframework.beans.AbstractNestablePropertyAccessor$PropertyHandler",
      "org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler"
    );
  }
}
