/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:48:03 GMT 2022
 */

package org.springframework.samples.petclinic.evosuite.vet;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.samples.petclinic.vet.Specialty;
import org.springframework.samples.petclinic.vet.Vet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Vet_ESTest extends Vet_ESTest_scaffolding {

  @Test
  public void testGetSpecialtiesInternalReturningSetWhereIsEmptyIsFalse()  throws Throwable  {
      Vet vet0 = new Vet();
      Specialty specialty0 = new Specialty();
      vet0.addSpecialty(specialty0);
      Set<Specialty> set0 = vet0.getSpecialtiesInternal();
      assertTrue(set0.contains(specialty0));
  }

  @Test
  public void testGetSpecialtiesThrowsIllegalArgumentException()  throws Throwable  {
      Vet vet0 = new Vet();
      vet0.addSpecialty((Specialty) null);
      Specialty specialty0 = new Specialty();
      vet0.addSpecialty(specialty0);
      // Undeclared exception!
      try {
        vet0.getSpecialties();
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Target object must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test
  public void testAddSpecialtyThrowsNullPointerException()  throws Throwable  {
      Vet vet0 = new Vet();
      TreeSet<Specialty> treeSet0 = new TreeSet<Specialty>();
      vet0.setSpecialtiesInternal(treeSet0);
      // Undeclared exception!
      try {
        vet0.addSpecialty((Specialty) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test
  public void testGetSpecialtiesInternalReturningSetWhereIsEmptyIsTrue()  throws Throwable  {
      Vet vet0 = new Vet();
      Specialty specialty0 = new Specialty();
      vet0.getSpecialtiesInternal();
      vet0.addSpecialty(specialty0);
      assertNull(specialty0.getName());
  }

  @Test
  public void testGetNrOfSpecialtiesReturningZero()  throws Throwable  {
      Vet vet0 = new Vet();
      int int0 = vet0.getNrOfSpecialties();
      assertEquals(0, int0);
  }

  @Test
  public void testGetSpecialties()  throws Throwable  {
      Vet vet0 = new Vet();
      List<Specialty> list0 = vet0.getSpecialties();
      assertTrue(list0.isEmpty());
  }

  @Test
  public void testAddSpecialtyThrowsClassCastException()  throws Throwable  {
      Vet vet0 = new Vet();
      TreeSet<Specialty> treeSet0 = new TreeSet<Specialty>();
      vet0.setSpecialtiesInternal(treeSet0);
      Specialty specialty0 = new Specialty();
      // Undeclared exception!
      try {
        vet0.addSpecialty(specialty0);
        fail("Expecting exception: ClassCastException");

      } catch(ClassCastException e) {
         //
         // class org.springframework.samples.petclinic.vet.Specialty cannot be cast to class java.lang.Comparable (org.springframework.samples.petclinic.vet.Specialty is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @e2f79e4; java.lang.Comparable is in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test
  public void testGetNrOfSpecialtiesReturningPositive()  throws Throwable  {
      Vet vet0 = new Vet();
      Specialty specialty0 = new Specialty();
      vet0.addSpecialty(specialty0);
      int int0 = vet0.getNrOfSpecialties();
      assertEquals(1, int0);
  }
}
