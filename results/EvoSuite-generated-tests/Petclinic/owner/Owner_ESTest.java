/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 12:55:44 GMT 2022
 */

package org.springframework.samples.petclinic.evosuite.owner;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.samples.petclinic.owner.Owner;
import org.springframework.samples.petclinic.owner.Pet;
import org.springframework.samples.petclinic.owner.Visit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test
  public void testGetTelephoneReturningNonEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setTelephone("RUNTIME_OR_ERROR");
      String string0 = owner0.getTelephone();
      assertEquals("RUNTIME_OR_ERROR", string0);
  }

  @Test
  public void testGetPetsReturningListWhereIsEmptyIsFalseAndListWhereSizeIsPositive()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      List<Pet> list0 = owner0.getPets();
      assertTrue(list0.contains(pet0));
  }

  @Test
  public void testGetPetTaking2ArgumentsReturningPetWhereIsNewIsFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      pet0.setName("*");
      Pet pet1 = owner0.getPet("*", true);
      assertEquals(1, (int)pet1.getId());
  }

  @Test
  public void testGetPetTakingStringReturningPetWhereIsNewIsFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      pet0.setName("*");
      Pet pet1 = owner0.getPet("*");
      assertEquals("*", pet1.toString());
  }

  @Test
  public void testGetCityReturningNonEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setCity(".^Rkx");
      String string0 = owner0.getCity();
      assertEquals(".^Rkx", string0);
  }

  @Test
  public void testGetCityReturningEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setCity("");
      String string0 = owner0.getCity();
      assertEquals("", string0);
  }

  @Test
  public void testGetAddressReturningNonEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setAddress("4Qu\"zgps_#c_UTxU2");
      String string0 = owner0.getAddress();
      assertEquals("4Qu\"zgps_#c_UTxU2", string0);
  }

  @Test
  public void testAddVisitReturningOwnerWhereIsNewIsTrue()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      Visit visit0 = new Visit();
      Owner owner1 = owner0.addVisit(integer0, visit0);
      assertTrue(owner1.isNew());
  }

  @Test
  public void testAddVisitReturningOwnerWhereIsNewIsFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(448);
      owner0.setId(integer0);
      pet0.setId(integer0);
      Visit visit0 = new Visit();
      Owner owner1 = owner0.addVisit(integer0, visit0);
      assertNull(owner1.getAddress());
  }

  @Test
  public void testGetPetTaking2ArgumentsThrowsNullPointerException()  throws Throwable  {
      Owner owner0 = new Owner();
      // Undeclared exception!
      try {
        owner0.getPet((String) null, true);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.samples.petclinic.owner.Owner", e);
      }
  }

  @Test
  public void testGetPetTakingStringThrowsNullPointerException()  throws Throwable  {
      Owner owner0 = new Owner();
      // Undeclared exception!
      try {
        owner0.getPet((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.samples.petclinic.owner.Owner", e);
      }
  }

  @Test
  public void testAddPetThrowsNullPointerException()  throws Throwable  {
      Owner owner0 = new Owner();
      // Undeclared exception!
      try {
        owner0.addPet((Pet) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.samples.petclinic.owner.Owner", e);
      }
  }

  @Test
  public void testGetPetTaking2ArgumentsReturningPetWhereIsNewIsTrue()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      pet0.setName("YK3OvaVT$#");
      owner0.addPet(pet0);
      Pet pet1 = owner0.getPet("YK3OvaVT$#", false);
      assertEquals("YK3OvaVT$#", pet1.getName());
  }

  @Test
  public void testGetPetTaking2ArgumentsWithFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Pet pet1 = owner0.getPet("HNCD$1-", false);
      assertNull(pet1);
  }

  @Test
  public void testGetPetsReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero()  throws Throwable  {
      Owner owner0 = new Owner();
      List<Pet> list0 = owner0.getPets();
      assertTrue(list0.isEmpty());
  }

  @Test
  public void testGetPetTakingStringReturningPetWhereIsNewIsTrue()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      pet0.setName("*");
      owner0.addPet(pet0);
      Pet pet1 = owner0.getPet("*");
      assertEquals("*", pet1.toString());
  }

  @Test
  public void testGetPetTaking2ArgumentsWithTrue()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Pet pet1 = owner0.getPet("(@\"vp}q3tp", true);
      assertNull(pet1);
  }

  @Test
  public void testGetPetTakingIntegerWithNegative()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      Integer integer1 = new Integer((-303));
      Pet pet1 = owner0.getPet(integer1);
      assertNull(pet1);
  }

  @Test
  public void testGetPetTakingIntegerReturningPetWhereIsNewIsFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      Pet pet1 = owner0.getPet(integer0);
      assertNull(pet1.toString());
  }

  @Test
  public void testAddPetWithPetWhereIsNewIsFalse()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      Integer integer0 = new Integer(1);
      pet0.setId(integer0);
      owner0.addPet(pet0);
      assertNull(owner0.getFirstName());
  }

  @Test
  public void testGetCityReturningNull()  throws Throwable  {
      Owner owner0 = new Owner();
      String string0 = owner0.getCity();
      assertNull(string0);
  }

  @Test
  public void testGetPetTakingStringReturningNull()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = owner0.getPet("address");
      assertNull(pet0);
  }

  @Test
  public void testGetTelephoneReturningNull()  throws Throwable  {
      Owner owner0 = new Owner();
      String string0 = owner0.getTelephone();
      assertNull(string0);
  }

  @Test
  public void testGetAddressReturningEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setAddress("");
      String string0 = owner0.getAddress();
      assertEquals("", string0);
  }

  @Test
  public void testAddVisitThrowsIllegalArgumentException()  throws Throwable  {
      Owner owner0 = new Owner();
      Integer integer0 = new Integer((-1064));
      Visit visit0 = new Visit();
      // Undeclared exception!
      try {
        owner0.addVisit(integer0, visit0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Invalid Pet identifier!
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test
  public void testToString()  throws Throwable  {
      Owner owner0 = new Owner();
      String string0 = owner0.toString();
      assertNotNull(string0);
  }

  @Test
  public void testGetTelephoneReturningEmptyString()  throws Throwable  {
      Owner owner0 = new Owner();
      owner0.setTelephone("");
      String string0 = owner0.getTelephone();
      assertEquals("", string0);
  }

  @Test
  public void testGetPetTakingInteger()  throws Throwable  {
      Owner owner0 = new Owner();
      Pet pet0 = new Pet();
      owner0.addPet(pet0);
      Integer integer0 = new Integer(1);
      Pet pet1 = owner0.getPet(integer0);
      assertNull(pet1);
  }

  @Test
  public void testGetAddressReturningNull()  throws Throwable  {
      Owner owner0 = new Owner();
      String string0 = owner0.getAddress();
      assertNull(string0);
  }
}
