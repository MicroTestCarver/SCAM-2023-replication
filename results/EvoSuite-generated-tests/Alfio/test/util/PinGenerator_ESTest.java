/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 03:01:49 GMT 2023
 */

package alfio.test.util;

import alfio.util.PinGenerator_ESTest_scaffolding;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alfio.util.PinGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PinGenerator_ESTest extends PinGenerator_ESTest_scaffolding {

  @Test
  public void testUuidToPinTaking2ArgumentsWithZero()  throws Throwable  {
      String string0 = PinGenerator.uuidToPin("9", 0);
      assertEquals("L", string0);
  }

  @Test
  public void testUuidToPinTaking2ArgumentsThrowsStringIndexOutOfBoundsException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin("", 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void testUuidToPinTaking2ArgumentsThrowsNumberFormatException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin("[Assertion failed] - this String argument must have length; it must not be null or empty", 6);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[Assert\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test
  public void testUuidToPinTaking2ArgumentsThrowsNullPointerException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin((String) null, 813);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.util.PinGenerator", e);
      }
  }

  @Test
  public void testUuidToPinTakingStringThrowsStringIndexOutOfBoundsException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin("3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void testUuidToPinTakingStringThrowsNumberFormatException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin("s/q(Te7gzf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s/q(Te7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test
  public void testUuidToPinTakingStringThrowsNullPointerException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.uuidToPin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.util.PinGenerator", e);
      }
  }

  @Test
  public void testPinToPartialUuidTaking2ArgumentsThrowsIllegalArgumentException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.pinToPartialUuid("", 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the given PIN is not valid
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test
  public void testPinToPartialUuidTakingStringThrowsIllegalArgumentException()  throws Throwable  {
      // Undeclared exception!
      try { 
        PinGenerator.pinToPartialUuid("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the given PIN is not valid
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test
  public void testIsPinValidTaking2ArgumentsReturningTrue()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid("9", 0);
      assertTrue(boolean0);
  }

  @Test
  public void testIsPinValidTaking2ArgumentsWithEmptyString()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid("", 0);
      assertFalse(boolean0);
  }

  @Test
  public void testIsPinValidTaking2ArgumentsWithNull()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid((String) null, 6);
      assertFalse(boolean0);
  }

  @Test
  public void testPinToPartialUuidTaking2Arguments()  throws Throwable  {
      String string0 = PinGenerator.pinToPartialUuid("9", 1);
      assertEquals("19", string0);
  }

  @Test
  public void testUuidToPinTaking2ArgumentsWithPositive()  throws Throwable  {
      String string0 = PinGenerator.uuidToPin("11492ff1", 7);
      assertEquals("A7MUJQE", string0);
  }

  @Test
  public void testIsPinValidTakingStringReturningFalse()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid("Cv'Ozb&");
      assertFalse(boolean0);
  }

  @Test
  public void testIsPinValidTakingStringReturningTrue()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid("m3muJqe");
      assertTrue(boolean0);
  }

  @Test
  public void testIsPinValidTaking2Arguments()  throws Throwable  {
      boolean boolean0 = PinGenerator.isPinValid(" is not assignable to ", 7);
      assertFalse(boolean0);
  }

  @Test
  public void testPinToPartialUuidTakingString()  throws Throwable  {
      String string0 = PinGenerator.pinToPartialUuid("Aj7McP");
      assertEquals("03759be", string0);
  }

  @Test
  public void testUuidToPinTakingString()  throws Throwable  {
      String string0 = PinGenerator.uuidToPin("03759be");
      assertEquals("AJ7MCP", string0);
  }
}
