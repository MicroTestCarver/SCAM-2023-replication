/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 09 23:11:37 GMT 2023
 */

package alfio.extension;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import alfio.extension.SimpleHttpClientCachedResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleHttpClientCachedResponse_ESTest extends SimpleHttpClientCachedResponse_ESTest_scaffolding {

  @Test
  public void testIsSuccessfulReturningTrue()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(true, 0, (Map<String, List<String>>) null, "!_V0?]UT)]SZ3;Lu)");
      boolean boolean0 = simpleHttpClientCachedResponse0.isSuccessful();
      assertEquals(0, simpleHttpClientCachedResponse0.getCode());
      assertTrue(boolean0);
  }

  @Test
  public void testGetTempFilePathReturningNonEmptyString()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, 1, hashMap0, "GSS_LIB");
      simpleHttpClientCachedResponse0.getTempFilePath();
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
      assertEquals(1, simpleHttpClientCachedResponse0.getCode());
  }

  @Test
  public void testGetTempFilePathReturningEmptyString()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, 1015, (Map<String, List<String>>) null, "");
      simpleHttpClientCachedResponse0.getTempFilePath();
      assertEquals(1015, simpleHttpClientCachedResponse0.getCode());
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
  }

  @Test
  public void testGetHeadersReturningMapWhereIsEmptyIsTrueAndMapWhereSizeIsZero()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, 1, hashMap0, "GSS_LIB");
      simpleHttpClientCachedResponse0.getHeaders();
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
      assertEquals(1, simpleHttpClientCachedResponse0.getCode());
  }

  @Test
  public void testGetHeadersReturningMapWhereIsEmptyIsFalseAndMapWhereSizeIsPositive()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, 1, hashMap0, "GSS_LIB");
      hashMap0.put("GSS_LIB", (List<String>) null);
      simpleHttpClientCachedResponse0.getHeaders();
      assertEquals(1, simpleHttpClientCachedResponse0.getCode());
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
  }

  @Test
  public void testGetCodeReturningZero()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(true, 0, (Map<String, List<String>>) null, "!_V0?]UT)]SZ3;Lu)");
      int int0 = simpleHttpClientCachedResponse0.getCode();
      assertTrue(simpleHttpClientCachedResponse0.isSuccessful());
      assertEquals(0, int0);
  }

  @Test
  public void testGetCodeReturningPositive()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, 1015, (Map<String, List<String>>) null, "");
      int int0 = simpleHttpClientCachedResponse0.getCode();
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
      assertEquals(1015, int0);
  }

  @Test
  public void testIsSuccessfulReturningFalse()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, (-985), (Map<String, List<String>>) null, (String) null);
      boolean boolean0 = simpleHttpClientCachedResponse0.isSuccessful();
      assertEquals((-985), simpleHttpClientCachedResponse0.getCode());
      assertFalse(boolean0);
  }

  @Test
  public void testGetCodeReturningNegative()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, (-985), (Map<String, List<String>>) null, (String) null);
      int int0 = simpleHttpClientCachedResponse0.getCode();
      assertEquals((-985), int0);
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
  }

  @Test
  public void testGetHeadersReturningNull()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, (-985), (Map<String, List<String>>) null, (String) null);
      simpleHttpClientCachedResponse0.getHeaders();
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
      assertEquals((-985), simpleHttpClientCachedResponse0.getCode());
  }

  @Test
  public void testGetTempFilePathReturningNull()  throws Throwable  {
      SimpleHttpClientCachedResponse simpleHttpClientCachedResponse0 = new SimpleHttpClientCachedResponse(false, (-985), (Map<String, List<String>>) null, (String) null);
      simpleHttpClientCachedResponse0.getTempFilePath();
      assertEquals((-985), simpleHttpClientCachedResponse0.getCode());
      assertFalse(simpleHttpClientCachedResponse0.isSuccessful());
  }
}
