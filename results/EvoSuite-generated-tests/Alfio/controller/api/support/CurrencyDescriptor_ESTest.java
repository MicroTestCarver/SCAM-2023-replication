/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 03:48:42 GMT 2023
 */

package alfio.controller.api.support;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CurrencyDescriptor_ESTest extends CurrencyDescriptor_ESTest_scaffolding {

  @Test
  public void testGetSymbolReturningNull()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("", "", (String) null, 1);
      String string0 = currencyDescriptor0.getSymbol();
      assertNull(string0);
      assertEquals(1, currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetSymbolReturningEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("", "", "", (-1));
      currencyDescriptor0.getSymbol();
      assertEquals((-1), currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetNameReturningEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("", "", "", (-1));
      currencyDescriptor0.getName();
      assertEquals((-1), currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetFractionDigitsReturningZero()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor((String) null, "1\"ih%>P\";!Ib~", "", 0);
      int int0 = currencyDescriptor0.getFractionDigits();
      assertEquals("", currencyDescriptor0.getSymbol());
      assertEquals(0, int0);
      assertEquals("1\"ih%>P\";!Ib~", currencyDescriptor0.getName());
  }

  @Test
  public void testGetFractionDigitsReturningNegative()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", (-3025));
      int int0 = currencyDescriptor0.getFractionDigits();
      assertEquals((-3025), int0);
  }

  @Test
  public void testGetCodeReturningNull()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor((String) null, (String) null, "", 1127);
      String string0 = currencyDescriptor0.getCode();
      assertEquals(1127, currencyDescriptor0.getFractionDigits());
      assertNull(string0);
  }

  @Test
  public void testGetCodeReturningEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("", "", (String) null, 1);
      String string0 = currencyDescriptor0.getCode();
      assertNotNull(string0);
      assertEquals(1, currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetNameReturningNull()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor((String) null, (String) null, "", 1127);
      String string0 = currencyDescriptor0.getName();
      assertEquals(1127, currencyDescriptor0.getFractionDigits());
      assertNull(string0);
  }

  @Test
  public void testGetCodeReturningNonEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", (-3025));
      currencyDescriptor0.getCode();
      assertEquals((-3025), currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetSymbolReturningNonEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", "p/?*@}}U'>?Kq", (-3025));
      currencyDescriptor0.getSymbol();
      assertEquals((-3025), currencyDescriptor0.getFractionDigits());
  }

  @Test
  public void testGetFractionDigitsReturningPositive()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("", ";(\"G@HSn>l6@YMx}", "", 1168);
      int int0 = currencyDescriptor0.getFractionDigits();
      assertEquals(";(\"G@HSn>l6@YMx}", currencyDescriptor0.getName());
      assertEquals("", currencyDescriptor0.getCode());
      assertEquals(1168, int0);
      assertEquals("", currencyDescriptor0.getSymbol());
  }

  @Test
  public void testGetNameReturningNonEmptyString()  throws Throwable  {
      CurrencyDescriptor currencyDescriptor0 = new CurrencyDescriptor("5Z|J;z\"$=B>'M#7^u", "5Z|J;z\"$=B>'M#7^u", "1_7J\"\"R$SNF_xsChiR", (-2379));
      String string0 = currencyDescriptor0.getName();
      assertEquals("1_7J\"\"R$SNF_xsChiR", currencyDescriptor0.getSymbol());
      assertEquals("5Z|J;z\"$=B>'M#7^u", string0);
      assertEquals("5Z|J;z\"$=B>'M#7^u", currencyDescriptor0.getCode());
      assertEquals((-2379), currencyDescriptor0.getFractionDigits());
  }
}
