/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 09 23:53:29 GMT 2023
 */

package alfio.controller.api.admin;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.AbstractMap;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.Map;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializablePair_ESTest extends SerializablePair_ESTest_scaffolding {

  @Test
  public void testOfReturningNonNull()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of((Integer) null, integer0);
      assertNotNull(serializablePair0);
  }

  @Test
  public void testToStringReturningNonEmptyString()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      String string0 = serializablePair0.toString("km2");
      assertEquals("km2", string0);
  }

  @Test
  public void testToStringReturningEmptyString()  throws Throwable  {
      Integer integer0 = new Integer((-2832));
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>(integer0, integer0);
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      String string0 = serializablePair0.toString("");
      assertEquals("", string0);
  }

  @Test
  public void testSetValue()  throws Throwable  {
      Integer integer0 = new Integer(184);
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      Integer integer1 = serializablePair0.setValue(integer0);
      assertNull(integer1);
  }

  @Test
  public void testGetValue()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      Integer integer0 = serializablePair0.getValue();
      assertNull(integer0);
  }

  @Test
  public void testGetLeft()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      Integer integer0 = serializablePair0.getLeft();
      assertNull(integer0);
  }

  @Test
  public void testGetKey()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      Integer integer0 = serializablePair0.getKey();
      assertNull(integer0);
  }

  @Test
  public void testCompareToReturningPositive()  throws Throwable  {
      Integer integer0 = new Integer((-904));
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of(integer0, integer0);
      Pair<Integer, Integer> pair0 = ImmutablePair.left(integer0);
      MutablePair<Integer, Integer> mutablePair0 = MutablePair.of((Map.Entry<Integer, Integer>) pair0);
      int int0 = serializablePair0.compareTo(mutablePair0);
      assertEquals(1, int0);
  }

  @Test
  public void testCompareToReturningNegative()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of((Integer) null, (Integer) null);
      Integer integer0 = new Integer(0);
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>(integer0, integer0);
      int int0 = serializablePair0.compareTo(mutablePair0);
      assertEquals((-1), int0);
  }

  @Test
  public void testToStringThrowsUnknownFormatConversionException()  throws Throwable  {
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.nullPair();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) immutablePair0);
      // Undeclared exception!
      try { 
        serializablePair0.toString("]<\"Vnim`%-)mH@rI");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '-'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test
  public void testToStringThrowsMissingFormatWidthException()  throws Throwable  {
      Integer integer0 = new Integer((-1486));
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of(integer0, integer0);
      // Undeclared exception!
      try { 
        serializablePair0.toString("m.%#-ecz");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-#e
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test
  public void testToStringThrowsFormatFlagsConversionMismatchException()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      // Undeclared exception!
      try { 
        serializablePair0.toString("o@oCA%+c#G,vN\r");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = +
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test
  public void testToStringThrowsNullPointerException()  throws Throwable  {
      Integer integer0 = new Integer(184);
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of(integer0, integer0);
      // Undeclared exception!
      try { 
        serializablePair0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void testSetValueThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.setValue((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }

  @Test
  public void testGetRightThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.getRight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }

  @Test
  public void testGetKeyThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.getKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }

  @Test
  public void testCompareToThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.compareTo((Pair<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }

  @Test
  public void testGetRight()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      Integer integer0 = serializablePair0.getRight();
      assertNull(integer0);
  }

  @Test
  public void testSetValueThrowsUnsupportedOperationException()  throws Throwable  {
      Integer integer0 = new Integer((-904));
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of(integer0, integer0);
      // Undeclared exception!
      try { 
        serializablePair0.setValue((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.tuple.ImmutablePair", e);
      }
  }

  @Test
  public void testGetValueThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }

  @Test
  public void testToStringThrowsIllegalFormatConversionException()  throws Throwable  {
      Integer integer0 = new Integer((-155));
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.of(integer0, integer0);
      // Undeclared exception!
      try { 
        serializablePair0.toString("{-%6arV8M A");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test
  public void testCompareToReturningZero()  throws Throwable  {
      MutablePair<Integer, Integer> mutablePair0 = new MutablePair<Integer, Integer>();
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) mutablePair0);
      int int0 = serializablePair0.compareTo(mutablePair0);
      assertEquals(0, int0);
  }

  @Test
  public void testToStringThrowsIllegalFormatFlagsException()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      ImmutablePair<Integer, Integer> immutablePair0 = ImmutablePair.of((Map.Entry<Integer, Integer>) abstractMap_SimpleImmutableEntry0);
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) immutablePair0);
      // Undeclared exception!
      try { 
        serializablePair0.toString("6Yp6i%+nm\"<_]9");
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '+'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test
  public void testGetLeftThrowsNullPointerException()  throws Throwable  {
      SerializablePair<Integer, Integer> serializablePair0 = SerializablePair.fromPair((Pair<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        serializablePair0.getLeft();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.controller.api.admin.SerializablePair", e);
      }
  }
}
