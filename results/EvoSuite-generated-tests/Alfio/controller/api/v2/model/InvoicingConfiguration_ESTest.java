/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 08:47:43 GMT 2023
 */

package alfio.controller.api.v2.model;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InvoicingConfiguration_ESTest extends InvoicingConfiguration_ESTest_scaffolding {

  @Test
  public void testIsVatNumberStrictlyRequiredReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, true, false, false, false);
      boolean boolean0 = invoicingConfiguration0.isVatNumberStrictlyRequired();
      assertTrue(invoicingConfiguration0.isOnlyInvoice());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
      assertFalse(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(boolean0);
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
  }

  @Test
  public void testIsUserCanDownloadReceiptOrInvoiceReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, false, true, true, true);
      boolean boolean0 = invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice();
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(boolean0);
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
  }

  @Test
  public void testIsOnlyInvoiceReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, true, false, false, false);
      boolean boolean0 = invoicingConfiguration0.isOnlyInvoice();
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(boolean0);
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertFalse(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertFalse(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
  }

  @Test
  public void testIsInvoiceAllowedReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, false, true, true, true);
      boolean boolean0 = invoicingConfiguration0.isInvoiceAllowed();
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(boolean0);
  }

  @Test
  public void testIsEuVatCheckingEnabledReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, false, false, false, true, false, false);
      boolean boolean0 = invoicingConfiguration0.isEuVatCheckingEnabled();
      assertFalse(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(boolean0);
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
  }

  @Test
  public void testIsEnabledItalyEInvoicingReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, false, true, true, true);
      boolean boolean0 = invoicingConfiguration0.isEnabledItalyEInvoicing();
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(boolean0);
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
  }

  @Test
  public void testIsCustomerReferenceEnabledReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, true, false, false, false);
      boolean boolean0 = invoicingConfiguration0.isCustomerReferenceEnabled();
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertFalse(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertFalse(boolean0);
  }

  @Test
  public void testIsEuVatCheckingEnabledReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(true, true, false, false, true, false, true);
      boolean boolean0 = invoicingConfiguration0.isEuVatCheckingEnabled();
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertTrue(boolean0);
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
  }

  @Test
  public void testIsUserCanDownloadReceiptOrInvoiceReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(true, true, false, false, true, false, true);
      boolean boolean0 = invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice();
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertTrue(boolean0);
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
  }

  @Test
  public void testIsEnabledItalyEInvoicingReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(true, true, false, false, true, false, true);
      boolean boolean0 = invoicingConfiguration0.isEnabledItalyEInvoicing();
      assertTrue(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertFalse(boolean0);
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
  }

  @Test
  public void testIsOnlyInvoiceReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, false, false, false, true, false, false);
      boolean boolean0 = invoicingConfiguration0.isOnlyInvoice();
      assertFalse(boolean0);
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertFalse(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertFalse(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
  }

  @Test
  public void testIsInvoiceAllowedReturningFalse()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, false, false, false, true, false, false);
      boolean boolean0 = invoicingConfiguration0.isInvoiceAllowed();
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertFalse(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertFalse(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertFalse(boolean0);
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
  }

  @Test
  public void testIsVatNumberStrictlyRequiredReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(true, true, false, false, true, false, true);
      boolean boolean0 = invoicingConfiguration0.isVatNumberStrictlyRequired();
      assertFalse(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertFalse(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertTrue(invoicingConfiguration0.isCustomerReferenceEnabled());
      assertTrue(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertFalse(invoicingConfiguration0.isInvoiceAllowed());
      assertTrue(boolean0);
  }

  @Test
  public void testIsCustomerReferenceEnabledReturningTrue()  throws Throwable  {
      InvoicingConfiguration invoicingConfiguration0 = new InvoicingConfiguration(false, true, true, true, true, true, true);
      boolean boolean0 = invoicingConfiguration0.isCustomerReferenceEnabled();
      assertTrue(invoicingConfiguration0.isEnabledItalyEInvoicing());
      assertFalse(invoicingConfiguration0.isUserCanDownloadReceiptOrInvoice());
      assertTrue(boolean0);
      assertTrue(invoicingConfiguration0.isVatNumberStrictlyRequired());
      assertTrue(invoicingConfiguration0.isEuVatCheckingEnabled());
      assertTrue(invoicingConfiguration0.isOnlyInvoice());
      assertTrue(invoicingConfiguration0.isInvoiceAllowed());
  }
}
