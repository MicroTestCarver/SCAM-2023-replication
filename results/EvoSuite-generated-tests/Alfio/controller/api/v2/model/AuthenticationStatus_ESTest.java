/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 05:44:22 GMT 2023
 */

package alfio.controller.api.v2.model;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import alfio.model.user.PublicUserProfile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthenticationStatus_ESTest extends AuthenticationStatus_ESTest_scaffolding {

  @Test
  public void testIsEnabledReturningTrue()  throws Throwable  {
      alfio.model.user.User.Type user_Type0 = alfio.model.user.User.Type.INTERNAL;
      User user0 = new User(",~+)", ",~+)", ",~+)", user_Type0, (PublicUserProfile) null);
      AuthenticationStatus authenticationStatus0 = new AuthenticationStatus(true, user0);
      boolean boolean0 = authenticationStatus0.isEnabled();
      assertTrue(boolean0);
  }

  @Test
  public void testGetUserReturningUserWhereIsExternalIsTrue()  throws Throwable  {
      alfio.model.user.User.Type user_Type0 = alfio.model.user.User.Type.PUBLIC;
      User user0 = new User("", "", "", user_Type0, (PublicUserProfile) null);
      AuthenticationStatus authenticationStatus0 = new AuthenticationStatus(true, user0);
      authenticationStatus0.getUser();
      assertTrue(authenticationStatus0.isEnabled());
  }

  @Test
  public void testGetUserReturningUserWhereIsExternalIsFalse()  throws Throwable  {
      alfio.model.user.User.Type user_Type0 = alfio.model.user.User.Type.INTERNAL;
      User user0 = new User(",~+)", ",~+)", ",~+)", user_Type0, (PublicUserProfile) null);
      AuthenticationStatus authenticationStatus0 = new AuthenticationStatus(true, user0);
      authenticationStatus0.getUser();
      assertTrue(authenticationStatus0.isEnabled());
  }

  @Test
  public void testGetUserReturningNull()  throws Throwable  {
      AuthenticationStatus authenticationStatus0 = new AuthenticationStatus(false, (User) null);
      authenticationStatus0.getUser();
      assertFalse(authenticationStatus0.isEnabled());
  }

  @Test
  public void testIsEnabledReturningFalse()  throws Throwable  {
      AuthenticationStatus authenticationStatus0 = new AuthenticationStatus(false, (User) null);
      boolean boolean0 = authenticationStatus0.isEnabled();
      assertFalse(boolean0);
  }
}
