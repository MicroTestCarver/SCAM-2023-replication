/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 17:08:59 GMT 2023
 */

package alfio.controller.form;

import org.junit.Test;
import static org.junit.Assert.*;
import alfio.controller.form.UpdateTicketOwnerForm;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UpdateTicketOwnerForm_ESTest extends UpdateTicketOwnerForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetUserLanguageReturningNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("yAhL");
      String string0 = updateTicketOwnerForm0.getUserLanguage();
      assertEquals("yAhL", string0);
  }

  @Test(timeout = 4000)
  public void testGetUserLanguageReturningEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("");
      String string0 = updateTicketOwnerForm0.getUserLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setLastName("?`O6n85vwYu");
      String string0 = updateTicketOwnerForm0.getLastName();
      assertEquals("?`O6n85vwYu", string0);
  }

  @Test(timeout = 4000)
  public void testGetFullNameReturningNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFullName("Cp949C");
      String string0 = updateTicketOwnerForm0.getFullName();
      assertEquals("Cp949C", string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFirstName("Xpz=zc");
      String string0 = updateTicketOwnerForm0.getFirstName();
      assertEquals("Xpz=zc", string0);
  }

  @Test(timeout = 4000)
  public void testGetEmailReturningNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setEmail("doStop {}");
      String string0 = updateTicketOwnerForm0.getEmail();
      assertEquals("doStop {}", string0);
  }

  @Test(timeout = 4000)
  public void testGetEmailReturningEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setEmail("");
      String string0 = updateTicketOwnerForm0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testGetAdditionalReturningMapWhereSizeIsZero()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      TreeMap<String, List<String>> treeMap0 = new TreeMap<String, List<String>>();
      updateTicketOwnerForm0.setAdditional(treeMap0);
      Map<String, List<String>> map0 = updateTicketOwnerForm0.getAdditional();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void testGetAdditionalReturningMapWhereIsEmptyIsTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      ConcurrentHashMap<String, List<String>> concurrentHashMap0 = new ConcurrentHashMap<String, List<String>>();
      updateTicketOwnerForm0.setAdditional(concurrentHashMap0);
      Map<String, List<String>> map0 = updateTicketOwnerForm0.getAdditional();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void testGetAdditionalReturningMapWhereIsEmptyIsFalse()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      LinkedHashMap<String, List<String>> linkedHashMap0 = new LinkedHashMap<String, List<String>>();
      linkedHashMap0.put("", (List<String>) null);
      updateTicketOwnerForm0.setAdditional(linkedHashMap0);
      Map<String, List<String>> map0 = updateTicketOwnerForm0.getAdditional();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void testCanEqualReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.canEqual(updateTicketOwnerForm0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testCanEqualReturningFalse()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.canEqual("alfio.controller.form.UpdateTicketOwnerForm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetFullNameReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.getFullName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetUserLanguageReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.getUserLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetEmailReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetAdditionalReturningNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      Map<String, List<String>> map0 = updateTicketOwnerForm0.getAdditional();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetAdditionalAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      ConcurrentSkipListMap<String, List<String>> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, List<String>>();
      updateTicketOwnerForm0.setAdditional(concurrentSkipListMap0);
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setAdditional(concurrentSkipListMap0);
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetAdditional0()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      ConcurrentHashMap<String, List<String>> concurrentHashMap0 = new ConcurrentHashMap<String, List<String>>();
      updateTicketOwnerForm1.setAdditional(concurrentHashMap0);
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetUserLanguageAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("");
      assertFalse(updateTicketOwnerForm0.equals((Object)updateTicketOwnerForm1));
      
      updateTicketOwnerForm1.setUserLanguage("");
      boolean boolean0 = updateTicketOwnerForm1.equals(updateTicketOwnerForm0);
      assertTrue(updateTicketOwnerForm0.equals((Object)updateTicketOwnerForm1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetUserLanguage()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm1.equals(updateTicketOwnerForm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetLastNameAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setLastName(">z D;v~OP");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setLastName(">z D;v~OP");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetLastName0()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setLastName("D4ZD");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFirstNameAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFirstName("X/pz=-c");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setFirstName("X/pz=-c");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFirstName0()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setFirstName("zY~");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFullName0()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFullName("G*{.]9IV1?>-R\\NHO:");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm1.equals(updateTicketOwnerForm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFullName1()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setFullName("alfio.controller.form.UpdateTicketOwnerForm");
      boolean boolean0 = updateTicketOwnerForm1.equals(updateTicketOwnerForm0);
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetEmailAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setEmail("");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setEmail("");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testSetEmailWithNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setEmail("37?W");
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetEmailAndEqualsReturningFalse()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setEmail("");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsWithNonNull()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      Object object0 = new Object();
      boolean boolean0 = updateTicketOwnerForm0.equals(object0);
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
//  public void testEquals()  throws Throwable  {
//      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
//      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm0);
//      assertTrue(boolean0);
//  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetAdditional()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      TreeMap<String, List<String>> treeMap0 = new TreeMap<String, List<String>>();
      updateTicketOwnerForm0.setAdditional(treeMap0);
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetUserLanguage()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("yAhL");
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetLastName()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setLastName("~/.ueb/6_!U|J{IW|v9");
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetFirstName()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFirstName("Xpzc");
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetFullName()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFullName("yAhL");
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetAdditional1()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      ConcurrentSkipListMap<String, List<String>> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, List<String>>();
      updateTicketOwnerForm0.setAdditional(concurrentSkipListMap0);
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testToString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      String string0 = updateTicketOwnerForm0.toString();
      assertEquals("UpdateTicketOwnerForm(email=null, fullName=null, firstName=null, lastName=null, userLanguage=null, additional=null)", string0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFullNameAndEqualsReturningTrue()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFullName("alfio.controller.form.UpdateTicketOwnerForm");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      assertFalse(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      
      updateTicketOwnerForm1.setFullName("alfio.controller.form.UpdateTicketOwnerForm");
      boolean boolean0 = updateTicketOwnerForm1.equals(updateTicketOwnerForm0);
      assertTrue(updateTicketOwnerForm1.equals((Object)updateTicketOwnerForm0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetLastName1()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setLastName(">z D;v~OP");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetFirstName1()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setFirstName("X/pz=zc");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testHashCodeAndSetEmail()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setEmail("");
      updateTicketOwnerForm0.hashCode();
  }

  @Test(timeout = 4000)
  public void testEqualsAndSetUserLanguageAndSetUserLanguageWithNonEmptyString()  throws Throwable  {
      UpdateTicketOwnerForm updateTicketOwnerForm0 = new UpdateTicketOwnerForm();
      updateTicketOwnerForm0.setUserLanguage("n");
      UpdateTicketOwnerForm updateTicketOwnerForm1 = new UpdateTicketOwnerForm();
      boolean boolean0 = updateTicketOwnerForm0.equals(updateTicketOwnerForm1);
      assertFalse(boolean0);
  }
}
