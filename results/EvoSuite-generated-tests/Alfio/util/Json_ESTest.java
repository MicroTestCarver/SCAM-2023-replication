/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 14:51:57 GMT 2023
 */

package alfio.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alfio.util.Json;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JDesktopPane;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Json_ESTest extends Json_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testFromJsonStringReturningNull()  throws Throwable  {
      Json json0 = new Json();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = json0.fromJsonString("null", class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void testFromJsonStringReturningNonNull()  throws Throwable  {
      Json json0 = new Json();
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = json0.fromJsonString("\"DISPLAY\"", class0);
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ReturningNull()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = Json.fromJson("null", class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ReturningNonNull()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      Properties properties0 = Json.fromJson("{}", class0);
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void testToJsonThrowsIllegalStateException()  throws Throwable  {
      Json json0 = new Json();
      // Undeclared exception!
      try { 
        Json.toJson(json0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class alfio.util.Json and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("alfio.util.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonStringThrowsIllegalArgumentException()  throws Throwable  {
      Json json0 = new Json();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        json0.fromJsonString((String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsIllegalStateExceptionAndFromJsonTaking1And10()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        Json.fromJson("3*mGiK%jB_PL", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.fasterxml.jackson.core.JsonParseException: Unexpected character ('*' (code 42)): Expected space separating root-level values
         //  at [Source: (String)\"3*mGiK%jB_PL\"; line: 1, column: 3]
         //
         verifyException("alfio.util.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsIllegalArgumentExceptionAndFromJsonTaking1And10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Json.fromJson((String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsNullPointerException()  throws Throwable  {
      // Undeclared exception!
      try { 
        Json.fromJson("alfio.util.Json", (TypeReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsIllegalStateExceptionAndFromJsonTaking1And11()  throws Throwable  {
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0);
      Class<JsonAutoDetect> class0 = jsonAutoDetect_Value0.valueFor();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        Json.fromJson("1C9$\" {", typeReference0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.fasterxml.jackson.core.JsonParseException: Unexpected character ('C' (code 67)): Expected space separating root-level values
         //  at [Source: (String)\"1C9$\" {\"; line: 1, column: 3]
         //
         verifyException("alfio.util.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void testAsJsonStringThrowsIllegalStateException()  throws Throwable  {
      Json json0 = new Json();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        json0.asJsonString(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("alfio.util.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsTooManyResourcesException()  throws Throwable  {
      Class<JDesktopPane> class0 = JDesktopPane.class;
      // Undeclared exception!
      Json.fromJson("400", class0);
  }

  @Test(timeout = 4000)
  public void testFromJsonTaking1And1ThrowsIllegalArgumentExceptionAndFromJsonTaking1And11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Json.fromJson((String) null, (TypeReference<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument \"content\" is null
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void testAsJsonString()  throws Throwable  {
      Json json0 = new Json();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      String string0 = json0.asJsonString(integer0);
      assertEquals("400", string0);
  }

  @Test(timeout = 4000)
  public void testFromJsonStringThrowsIllegalStateException()  throws Throwable  {
      Json json0 = new Json();
      Class<JSpinner.NumberEditor> class0 = JSpinner.NumberEditor.class;
      // Undeclared exception!
      try { 
        json0.fromJsonString("[a(O1", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `javax.swing.JSpinner$NumberEditor` from Array value (token `JsonToken.START_ARRAY`)
         //  at [Source: (String)\"[a(O1\"; line: 1, column: 1]
         //
         verifyException("alfio.util.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void testToJson()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = Json.toJson(properties0);
      assertEquals("{}", string0);
  }
}
