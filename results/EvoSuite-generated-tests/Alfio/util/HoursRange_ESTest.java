/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 16:00:13 GMT 2023
 */

package alfio.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alfio.util.HoursRange;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HoursRange_ESTest extends HoursRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetDistanceInHoursAndGetDistanceInHoursReturningPositive0()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      LocalTime localTime1 = MockLocalTime.ofNanoOfDay(0);
      HoursRange hoursRange0 = new HoursRange(localTime1, localTime0);
      int int0 = hoursRange0.getDistanceInHours(localTime0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void testIncludesThrowsNullPointerException()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime0);
      // Undeclared exception!
      try { 
        hoursRange0.includes((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void testIncludes0()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime0);
      LocalTime localTime1 = MockLocalTime.now();
      boolean boolean0 = hoursRange0.includes(localTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testIncludes1()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime0);
      boolean boolean0 = hoursRange0.includes(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetDistanceInHoursAndGetDistanceInHoursReturningZero0()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      LocalTime localTime1 = MockLocalTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-3743));
      LocalTime localTime2 = MockLocalTime.now((ZoneId) zoneOffset0);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime1);
      int int0 = hoursRange0.getDistanceInHours(localTime2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testIncludesReturningTrue()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      LocalTime localTime1 = MockLocalTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1086));
      LocalTime localTime2 = MockLocalTime.now((ZoneId) zoneOffset0);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime1);
      boolean boolean0 = hoursRange0.includes(localTime2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetDistanceInHoursAndGetDistanceInHoursReturningPositive1()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(855L);
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime0);
      LocalTime localTime1 = MockLocalTime.now();
      int int0 = hoursRange0.getDistanceInHours(localTime1);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void testGetDistanceInHoursAndGetDistanceInHoursReturningZero1()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      HoursRange hoursRange0 = new HoursRange(localTime0, localTime0);
      int int0 = hoursRange0.getDistanceInHours(localTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testGetDistanceInHoursThrowsNullPointerException()  throws Throwable  {
      HoursRange hoursRange0 = new HoursRange((LocalTime) null, (LocalTime) null);
      // Undeclared exception!
      try { 
        hoursRange0.getDistanceInHours((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
