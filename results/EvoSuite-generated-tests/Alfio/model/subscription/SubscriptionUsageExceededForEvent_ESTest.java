/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 17:25:59 GMT 2023
 */

package alfio.model.subscription;

import org.junit.Test;
import static org.junit.Assert.*;
import alfio.model.subscription.SubscriptionUsageExceededForEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscriptionUsageExceededForEvent_ESTest extends SubscriptionUsageExceededForEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetRequestedReturningZero()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent(0, 0);
      int int0 = subscriptionUsageExceededForEvent0.getRequested();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testGetRequestedReturningNegative()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent((-270), (-270));
      int int0 = subscriptionUsageExceededForEvent0.getRequested();
      assertEquals((-270), int0);
  }

  @Test(timeout = 4000)
  public void testGetAllowedReturningPositive()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent(1810, 379);
      int int0 = subscriptionUsageExceededForEvent0.getAllowed();
      assertEquals(1810, int0);
  }

  @Test(timeout = 4000)
  public void testGetAllowedReturningNegative()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent((-270), (-270));
      int int0 = subscriptionUsageExceededForEvent0.getAllowed();
      assertEquals((-270), int0);
  }

  @Test(timeout = 4000)
  public void testGetRequestedReturningPositive()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent(1810, 379);
      int int0 = subscriptionUsageExceededForEvent0.getRequested();
      assertEquals(379, int0);
  }

  @Test(timeout = 4000)
  public void testGetAllowedReturningZero()  throws Throwable  {
      SubscriptionUsageExceededForEvent subscriptionUsageExceededForEvent0 = new SubscriptionUsageExceededForEvent(0, 0);
      int int0 = subscriptionUsageExceededForEvent0.getAllowed();
      assertEquals(0, int0);
  }
}
