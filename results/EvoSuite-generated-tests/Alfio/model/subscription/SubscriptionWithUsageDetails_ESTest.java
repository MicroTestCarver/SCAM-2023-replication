/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 08 16:42:06 GMT 2023
 */

package alfio.model.subscription;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import alfio.model.TicketReservationWithEventIdentifier;
import alfio.model.subscription.Subscription;
import alfio.model.subscription.SubscriptionWithUsageDetails;
import alfio.model.subscription.UsageDetails;
import java.util.List;
import java.util.Stack;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscriptionWithUsageDetails_ESTest extends SubscriptionWithUsageDetails_ESTest_scaffolding {

  @Test
  public void testGetUsageDetailsReturningNull()  throws Throwable  {
      Stack<TicketReservationWithEventIdentifier> stack0 = new Stack<TicketReservationWithEventIdentifier>();
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, (UsageDetails) null, stack0);
      UsageDetails usageDetails0 = subscriptionWithUsageDetails0.getUsageDetails();
      assertNull(usageDetails0);
  }

  @Test
  public void testGetReservationsReturningNull()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      UsageDetails usageDetails0 = new UsageDetails((Integer) null, integer0, (Integer) null);
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, usageDetails0, (List<TicketReservationWithEventIdentifier>) null);
      List<TicketReservationWithEventIdentifier> list0 = subscriptionWithUsageDetails0.getReservations();
      assertNull(list0);
  }

  @Test
  public void testGetReservationsReturningListWhereIsEmptyIsFalse()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      UsageDetails usageDetails0 = new UsageDetails((Integer) null, integer0, (Integer) null);
      Stack<TicketReservationWithEventIdentifier> stack0 = new Stack<TicketReservationWithEventIdentifier>();
      stack0.add((TicketReservationWithEventIdentifier) null);
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, usageDetails0, stack0);
      List<TicketReservationWithEventIdentifier> list0 = subscriptionWithUsageDetails0.getReservations();
      assertEquals(1, list0.size());
  }

  @Test
  public void testGetSubscription()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      UsageDetails usageDetails0 = new UsageDetails((Integer) null, integer0, (Integer) null);
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, usageDetails0, (List<TicketReservationWithEventIdentifier>) null);
      Subscription subscription0 = subscriptionWithUsageDetails0.getSubscription();
      assertNull(subscription0);
  }

  @Test
  public void testGetUsageDetailsReturningNonNull()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      UsageDetails usageDetails0 = new UsageDetails(integer0, integer0, integer0);
      Stack<TicketReservationWithEventIdentifier> stack0 = new Stack<TicketReservationWithEventIdentifier>();
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, usageDetails0, stack0);
      UsageDetails usageDetails1 = subscriptionWithUsageDetails0.getUsageDetails();
      assertSame(usageDetails1, usageDetails0);
  }

  @Test
  public void testGetReservationsReturningListWhereIsEmptyIsTrue()  throws Throwable  {
      Stack<TicketReservationWithEventIdentifier> stack0 = new Stack<TicketReservationWithEventIdentifier>();
      SubscriptionWithUsageDetails subscriptionWithUsageDetails0 = new SubscriptionWithUsageDetails((Subscription) null, (UsageDetails) null, stack0);
      List<TicketReservationWithEventIdentifier> list0 = subscriptionWithUsageDetails0.getReservations();
      assertTrue(list0.isEmpty());
  }
}
