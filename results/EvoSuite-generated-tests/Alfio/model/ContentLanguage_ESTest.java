/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 16:21:17 GMT 2023
 */

package alfio.model;

import org.junit.Test;
import static org.junit.Assert.*;
import alfio.model.ContentLanguage;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ContentLanguage_ESTest extends ContentLanguage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testEqualsReturningFalse()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      ContentLanguage contentLanguage1 = ContentLanguage.BULGARIAN;
      boolean boolean0 = contentLanguage0.equals(contentLanguage1);
      assertFalse(boolean0);
      assertEquals(2048, contentLanguage1.getValue());
  }

  @Test(timeout = 4000)
  public void testFindAllForReturningListWhereIsEmptyIsTrueAndListWhereSizeIsZero()  throws Throwable  {
      List<ContentLanguage> list0 = ContentLanguage.findAllFor(0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void testCanEqualReturningTrue()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.FRENCH;
      boolean boolean0 = contentLanguage0.canEqual(contentLanguage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetValue()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      int int0 = contentLanguage0.getValue();
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void testFindAllForReturningListWhereIsEmptyIsFalse()  throws Throwable  {
      List<ContentLanguage> list0 = ContentLanguage.findAllFor(2);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void testEqualsWithNonNull()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.FRENCH;
      Object object0 = new Object();
      boolean boolean0 = contentLanguage0.equals(object0);
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
//  public void testEqualsReturningTrue()  throws Throwable  {
//      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
//      boolean boolean0 = contentLanguage0.equals(contentLanguage0);
//      assertTrue(boolean0);
//  }

  @Test(timeout = 4000)
  public void testEquals()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      ContentLanguage contentLanguage1 = ContentLanguage.ITALIAN;
      boolean boolean0 = contentLanguage0.equals(contentLanguage1);
      assertEquals(1, contentLanguage1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testHashCode()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      contentLanguage0.hashCode();
      assertEquals(128, contentLanguage0.getValue());
  }

  @Test(timeout = 4000)
  public void testCanEqualReturningFalse()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      Object object0 = new Object();
      boolean boolean0 = contentLanguage0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetDisplayLanguage()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      String string0 = contentLanguage0.getDisplayLanguage();
      assertEquals("T\u00FCrk\u00E7e", string0);
  }

  @Test(timeout = 4000)
  public void testGetLocale()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      Locale locale0 = contentLanguage0.getLocale();
      assertEquals("tr", locale0.toString());
  }

  @Test(timeout = 4000)
  public void testGetLanguage()  throws Throwable  {
      ContentLanguage contentLanguage0 = ContentLanguage.TURKISH;
      String string0 = contentLanguage0.getLanguage();
      assertEquals("tr", string0);
  }
}
