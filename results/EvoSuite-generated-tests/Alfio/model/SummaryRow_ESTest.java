/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 08:19:29 GMT 2023
 */

package alfio.model;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import alfio.model.SummaryRow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SummaryRow_ESTest extends SummaryRow_ESTest_scaffolding {

  @Test
  public void testHashCode0()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("grJ#s", "X", "kc?} 0vQ'@IxR_", 865, "", (String) null, 1409, summaryRow_SummaryType0, "^:yQ-2UOt0 }\"a");
      summaryRow0.hashCode();
      assertEquals("SummaryRow(name=grJ#s, price=X, priceBeforeVat=kc?} 0vQ'@IxR_, amount=865, subTotal=, subTotalBeforeVat=null, originalSubTotal=1409, type=TAX_DETAIL, taxPercentage=^:yQ-2UOt0 }\"a)", summaryRow0.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse0()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2086), (String) null, (String) null, (-2086), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2086), "TAX_DETAIL", "TAX_DETAIL", (-2086), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2086, subTotal=TAX_DETAIL, subTotalBeforeVat=TAX_DETAIL, originalSubTotal=-2086, type=PROMOTION_CODE, taxPercentage=null)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse1()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("$ph%C\"KV%:hj", "r&.x^4/Q(LLz8eehL", "PROMOTION_CODE", 1, "l]I5&tCy3", "j_~HwD0@'", 933, summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow("$ph%C\"KV%:hj", "", "", 1, "{e|^5qn\".,L//", "", 933, summaryRow_SummaryType0, "$ph%C\"KV%:hj");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=$ph%C\"KV%:hj, price=r&.x^4/Q(LLz8eehL, priceBeforeVat=PROMOTION_CODE, amount=1, subTotal=l]I5&tCy3, subTotalBeforeVat=j_~HwD0@', originalSubTotal=933, type=TAX_DETAIL, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse2()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "\"OQ8phHS/N(4[:E0", "", 0, "mn?vaY: F8F%x/", "mn?vaY: F8F%x/", 1, summaryRow_SummaryType0, "\"OQ8phHS/N(4[:E0");
      SummaryRow summaryRow1 = new SummaryRow("*5bT$R,=.WpH)f", "", "", 0, "mn?vaY: F8F%x/", "SummaryRow(name=, price=\"OQ8phHS/N(4[:E0, priceBeforeVat=, amount=0, subTotal=mn?vaY: F8F%x/, subTotalBeforeVat=mn?vaY: F8F%x/, originalSubTotal=1, type=SUBSCRIPTION, taxPercentage=\"OQ8phHS/N(4[:E0)", 0, summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=*5bT$R,=.WpH)f, price=, priceBeforeVat=, amount=0, subTotal=mn?vaY: F8F%x/, subTotalBeforeVat=SummaryRow(name=, price=\"OQ8phHS/N(4[:E0, priceBeforeVat=, amount=0, subTotal=mn?vaY: F8F%x/, subTotalBeforeVat=mn?vaY: F8F%x/, originalSubTotal=1, type=SUBSCRIPTION, taxPercentage=\"OQ8phHS/N(4[:E0), originalSubTotal=0, type=SUBSCRIPTION, taxPercentage=)", summaryRow1.toString());
      assertEquals("SummaryRow(name=, price=\"OQ8phHS/N(4[:E0, priceBeforeVat=, amount=0, subTotal=mn?vaY: F8F%x/, subTotalBeforeVat=mn?vaY: F8F%x/, originalSubTotal=1, type=SUBSCRIPTION, taxPercentage=\"OQ8phHS/N(4[:E0)", summaryRow0.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse3()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2641), (String) null, (String) null, (-2641), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2644), (String) null, (String) null, (-2641), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertFalse(summaryRow0.equals((Object)summaryRow1));
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2644, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2641, type=SUBSCRIPTION, taxPercentage=null)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testGetTypeReturningNull()  throws Throwable  {
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-6), "Ch*x[B~", (String) null, (-6), (SummaryRow.SummaryType) null, (String) null);
      summaryRow0.getType();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-6, subTotal=Ch*x[B~, subTotalBeforeVat=null, originalSubTotal=-6, type=null, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testGetTaxPercentageReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("pX'}'1aH,odmC*", "pX'}'1aH,odmC*", "pX'}'1aH,odmC*", 0, "pX'}'1aH,odmC*", "SUBSCRIPTION", 0, summaryRow_SummaryType0, (String) null);
      summaryRow0.getTaxPercentage();
      assertEquals("SummaryRow(name=pX'}'1aH,odmC*, price=pX'}'1aH,odmC*, priceBeforeVat=pX'}'1aH,odmC*, amount=0, subTotal=pX'}'1aH,odmC*, subTotalBeforeVat=SUBSCRIPTION, originalSubTotal=0, type=PROMOTION_CODE, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testGetTaxPercentageReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow("rzZAB*RqF", "rzZAB*RqF", "e0;Dq;8[:Ve", 59, "rzZAB*RqF", "", 0, summaryRow_SummaryType0, "");
      summaryRow0.getTaxPercentage();
      assertEquals("SummaryRow(name=rzZAB*RqF, price=rzZAB*RqF, priceBeforeVat=e0;Dq;8[:Ve, amount=59, subTotal=rzZAB*RqF, subTotalBeforeVat=, originalSubTotal=0, type=DYNAMIC_DISCOUNT, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testGetSubTotalBeforeVatReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, "*;{W@&ecYr", 35, "*;{W@&ecYr", (String) null, (-2842), summaryRow_SummaryType0, "*;{W@&ecYr");
      summaryRow0.getSubTotalBeforeVat();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=*;{W@&ecYr, amount=35, subTotal=*;{W@&ecYr, subTotalBeforeVat=null, originalSubTotal=-2842, type=TICKET, taxPercentage=*;{W@&ecYr)", summaryRow0.toString());
  }

  @Test
  public void testGetSubTotalBeforeVatReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("2C?O ", "#iLhq-\"/l Xi~", "TICKET", (-42), "", "QTR<Lzvozn", (-42), summaryRow_SummaryType0, "alfio.model.SummaryRow$SummaryType");
      summaryRow0.getSubTotalBeforeVat();
      assertEquals("SummaryRow(name=2C?O , price=#iLhq-\"/l Xi~, priceBeforeVat=TICKET, amount=-42, subTotal=, subTotalBeforeVat=QTR<Lzvozn, originalSubTotal=-42, type=PROMOTION_CODE, taxPercentage=alfio.model.SummaryRow$SummaryType)", summaryRow0.toString());
  }

  @Test
  public void testGetSubTotalReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("{", "TAX_DETAIL", (String) null, (-2376), (String) null, "", (-3233), summaryRow_SummaryType0, "@}$EgvS8I):uIbTG6Y");
      summaryRow0.getSubTotal();
      assertEquals("SummaryRow(name={, price=TAX_DETAIL, priceBeforeVat=null, amount=-2376, subTotal=null, subTotalBeforeVat=, originalSubTotal=-3233, type=APPLIED_SUBSCRIPTION, taxPercentage=@}$EgvS8I):uIbTG6Y)", summaryRow0.toString());
  }

  @Test
  public void testGetSubTotalReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("pX'}'1aH,odmC*", "pX'}'1aH,odmC*", "pX'}'1aH,odmC*", 0, "pX'}'1aH,odmC*", "SUBSCRIPTION", 0, summaryRow_SummaryType0, (String) null);
      summaryRow0.getSubTotal();
      assertEquals("SummaryRow(name=pX'}'1aH,odmC*, price=pX'}'1aH,odmC*, priceBeforeVat=pX'}'1aH,odmC*, amount=0, subTotal=pX'}'1aH,odmC*, subTotalBeforeVat=SUBSCRIPTION, originalSubTotal=0, type=PROMOTION_CODE, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceBeforeVatReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("}9DPD", "}9DPD", (String) null, (-3233), "^KZ,TN)", "Rc}N)", (-2376), summaryRow_SummaryType0, "");
      summaryRow0.getPriceBeforeVat();
      assertEquals("SummaryRow(name=}9DPD, price=}9DPD, priceBeforeVat=null, amount=-3233, subTotal=^KZ,TN), subTotalBeforeVat=Rc}N), originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceBeforeVatReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("2C?O ", "#iLhq-\"/l Xi~", "TICKET", (-42), "", "QTR<Lzvozn", (-42), summaryRow_SummaryType0, "alfio.model.SummaryRow$SummaryType");
      summaryRow0.getPriceBeforeVat();
      assertEquals("SummaryRow(name=2C?O , price=#iLhq-\"/l Xi~, priceBeforeVat=TICKET, amount=-42, subTotal=, subTotalBeforeVat=QTR<Lzvozn, originalSubTotal=-42, type=PROMOTION_CODE, taxPercentage=alfio.model.SummaryRow$SummaryType)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, "*;{W@&ecYr", 35, "*;{W@&ecYr", (String) null, (-2842), summaryRow_SummaryType0, "*;{W@&ecYr");
      summaryRow0.getPrice();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=*;{W@&ecYr, amount=35, subTotal=*;{W@&ecYr, subTotalBeforeVat=null, originalSubTotal=-2842, type=TICKET, taxPercentage=*;{W@&ecYr)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("X3wh}*$R", "HMl?zj`Y>g):}CSlM t", "HMl?zj`Y>g):}CSlM t", 580, "", "_^B.n@w", 580, summaryRow_SummaryType0, (String) null);
      summaryRow0.getPrice();
      assertEquals("SummaryRow(name=X3wh}*$R, price=HMl?zj`Y>g):}CSlM t, priceBeforeVat=HMl?zj`Y>g):}CSlM t, amount=580, subTotal=, subTotalBeforeVat=_^B.n@w, originalSubTotal=580, type=TICKET, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testGetOriginalSubTotalReturningZero()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.ADDITIONAL_SERVICE;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 2, "", "", 0, summaryRow_SummaryType0, "");
      int int0 = summaryRow0.getOriginalSubTotal();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=2, subTotal=, subTotalBeforeVat=, originalSubTotal=0, type=ADDITIONAL_SERVICE, taxPercentage=)", summaryRow0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void testGetOriginalSubTotalReturningNegative()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("e", "t", "F=I\"xkH", (-1381), "e", "e", (-1381), summaryRow_SummaryType0, "e");
      int int0 = summaryRow0.getOriginalSubTotal();
      assertEquals("SummaryRow(name=e, price=t, priceBeforeVat=F=I\"xkH, amount=-1381, subTotal=e, subTotalBeforeVat=e, originalSubTotal=-1381, type=APPLIED_SUBSCRIPTION, taxPercentage=e)", summaryRow0.toString());
      assertEquals((-1381), int0);
  }

  @Test
  public void testGetNameReturningNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, 0, (String) null, "", 1698, summaryRow_SummaryType0, "");
      summaryRow0.getName();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=0, subTotal=null, subTotalBeforeVat=, originalSubTotal=1698, type=PROMOTION_CODE, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testGetNameReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("HscK.$s~vs#O?VMJC", "HscK.$s~vs#O?VMJC", "7lkYUb", 0, "#+le!I8E*.L", "", 0, summaryRow_SummaryType0, "");
      summaryRow0.getName();
      assertEquals("SummaryRow(name=HscK.$s~vs#O?VMJC, price=HscK.$s~vs#O?VMJC, priceBeforeVat=7lkYUb, amount=0, subTotal=#+le!I8E*.L, subTotalBeforeVat=, originalSubTotal=0, type=APPLIED_SUBSCRIPTION, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testGetAmountReturningPositive()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("APPLIED_SUBSCRIPTION", "uQ?f^/E^kMr1", "", 1778, "uQ?f^/E^kMr1", "", 1778, summaryRow_SummaryType0, "APPLIED_SUBSCRIPTION");
      int int0 = summaryRow0.getAmount();
      assertEquals("SummaryRow(name=APPLIED_SUBSCRIPTION, price=uQ?f^/E^kMr1, priceBeforeVat=, amount=1778, subTotal=uQ?f^/E^kMr1, subTotalBeforeVat=, originalSubTotal=1778, type=TAX_DETAIL, taxPercentage=APPLIED_SUBSCRIPTION)", summaryRow0.toString());
      assertEquals(1778, int0);
  }

  @Test
  public void testGetAmountReturningNegative()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("2C?O ", "#iLhq-\"/l Xi~", "TICKET", (-42), "", "QTR<Lzvozn", (-42), summaryRow_SummaryType0, "alfio.model.SummaryRow$SummaryType");
      int int0 = summaryRow0.getAmount();
      assertEquals("SummaryRow(name=2C?O , price=#iLhq-\"/l Xi~, priceBeforeVat=TICKET, amount=-42, subTotal=, subTotalBeforeVat=QTR<Lzvozn, originalSubTotal=-42, type=PROMOTION_CODE, taxPercentage=alfio.model.SummaryRow$SummaryType)", summaryRow0.toString());
      assertEquals((-42), int0);
  }

  @Test
  public void testCanEqualReturningTrue()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow("pX'}'1aH,odmC*", "pX'}'1aH,odmC*", "pX'}'1aH,odmC*", 0, "pX'}'1aH,odmC*", "SUBSCRIPTION", 0, summaryRow_SummaryType0, (String) null);
      summaryRow0.canEqual(summaryRow0);
      assertEquals("SummaryRow(name=pX'}'1aH,odmC*, price=pX'}'1aH,odmC*, priceBeforeVat=pX'}'1aH,odmC*, amount=0, subTotal=pX'}'1aH,odmC*, subTotalBeforeVat=SUBSCRIPTION, originalSubTotal=0, type=PROMOTION_CODE, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testCanEqualReturningFalseAndGetTypeReturningNonNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("APPLIED_SUBSCRIPTION", "uQ?f^/E^kMr1", "", 1778, "uQ?f^/E^kMr1", "", 1778, summaryRow_SummaryType0, "APPLIED_SUBSCRIPTION");
      SummaryRow.SummaryType summaryRow_SummaryType1 = summaryRow0.getType();
      summaryRow0.canEqual(summaryRow_SummaryType1);
      assertEquals("SummaryRow(name=APPLIED_SUBSCRIPTION, price=uQ?f^/E^kMr1, priceBeforeVat=, amount=1778, subTotal=uQ?f^/E^kMr1, subTotalBeforeVat=, originalSubTotal=1778, type=TAX_DETAIL, taxPercentage=APPLIED_SUBSCRIPTION)", summaryRow0.toString());
  }

  @Test
  public void testGetOriginalSubTotalReturningPositive()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "!jk)", 7, "(WroIhu<`s", "1MK9eQ:E-&oQ/{", 7, summaryRow_SummaryType0, "(WroIhu<`s");
      int int0 = summaryRow0.getOriginalSubTotal();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=!jk), amount=7, subTotal=(WroIhu<`s, subTotalBeforeVat=1MK9eQ:E-&oQ/{, originalSubTotal=7, type=APPLIED_SUBSCRIPTION, taxPercentage=(WroIhu<`s)", summaryRow0.toString());
      assertEquals(7, int0);
  }

  @Test
  public void testGetSubTotalReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3233), "", "", (-2376), summaryRow_SummaryType0, "V5aL");
      summaryRow0.getSubTotal();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3233, subTotal=, subTotalBeforeVat=, originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=V5aL)", summaryRow0.toString());
  }

  @Test
  public void testGetAmountReturningZero()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("", "UUkIjFUOdt(L`-j8i/", "(K>VD", 0, "(K>VD", "UUkIjFUOdt(L`-j8i/", 0, summaryRow_SummaryType0, "UUkIjFUOdt(L`-j8i/");
      int int0 = summaryRow0.getAmount();
      assertEquals("SummaryRow(name=, price=UUkIjFUOdt(L`-j8i/, priceBeforeVat=(K>VD, amount=0, subTotal=(K>VD, subTotalBeforeVat=UUkIjFUOdt(L`-j8i/, originalSubTotal=0, type=TAX_DETAIL, taxPercentage=UUkIjFUOdt(L`-j8i/)", summaryRow0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void testGetTaxPercentageReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("", "UUkIjFUOdt(L`-j8i/", "(K>VD", 0, "(K>VD", "UUkIjFUOdt(L`-j8i/", 0, summaryRow_SummaryType0, "UUkIjFUOdt(L`-j8i/");
      summaryRow0.getTaxPercentage();
      assertEquals("SummaryRow(name=, price=UUkIjFUOdt(L`-j8i/, priceBeforeVat=(K>VD, amount=0, subTotal=(K>VD, subTotalBeforeVat=UUkIjFUOdt(L`-j8i/, originalSubTotal=0, type=TAX_DETAIL, taxPercentage=UUkIjFUOdt(L`-j8i/)", summaryRow0.toString());
  }

  @Test
  public void testGetSubTotalBeforeVatReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3233), "", "", (-2376), summaryRow_SummaryType0, "V5aL");
      summaryRow0.getSubTotalBeforeVat();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3233, subTotal=, subTotalBeforeVat=, originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=V5aL)", summaryRow0.toString());
  }

  @Test
  public void testGetNameReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3233), "", "", (-2376), summaryRow_SummaryType0, "V5aL");
      summaryRow0.getName();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3233, subTotal=, subTotalBeforeVat=, originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=V5aL)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceBeforeVatReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3233), "", "", (-2376), summaryRow_SummaryType0, "V5aL");
      summaryRow0.getPriceBeforeVat();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3233, subTotal=, subTotalBeforeVat=, originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=V5aL)", summaryRow0.toString());
  }

  @Test
  public void testGetPriceReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3231), "", "", (-2371), summaryRow_SummaryType0, "");
      summaryRow0.getPrice();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3231, subTotal=, subTotalBeforeVat=, originalSubTotal=-2371, type=APPLIED_SUBSCRIPTION, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testGetTaxDetailReturningTrue()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("APPLIED_SUBSCRIPTION", "uQ?f^/E^kMr1", "", 1778, "uQ?f^/E^kMr1", "", 1778, summaryRow_SummaryType0, "APPLIED_SUBSCRIPTION");
      boolean boolean0 = summaryRow0.getTaxDetail();
      assertTrue(boolean0);
      assertEquals("SummaryRow(name=APPLIED_SUBSCRIPTION, price=uQ?f^/E^kMr1, priceBeforeVat=, amount=1778, subTotal=uQ?f^/E^kMr1, subTotalBeforeVat=, originalSubTotal=1778, type=TAX_DETAIL, taxPercentage=APPLIED_SUBSCRIPTION)", summaryRow0.toString());
  }

  @Test
  public void testGetTaxDetailReturningFalse()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.ADDITIONAL_SERVICE;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 2, "", "", 0, summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow0.getTaxDetail();
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=2, subTotal=, subTotalBeforeVat=, originalSubTotal=0, type=ADDITIONAL_SERVICE, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testIsDiscount0()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow("fX#*", "", "N?/Rw;kqU,P:F", 0, "N?/Rw;kqU,P:F", "N?/Rw;kqU,P:F", (-1), summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow0.isDiscount();
      assertEquals("SummaryRow(name=fX#*, price=, priceBeforeVat=N?/Rw;kqU,P:F, amount=0, subTotal=N?/Rw;kqU,P:F, subTotalBeforeVat=N?/Rw;kqU,P:F, originalSubTotal=-1, type=DYNAMIC_DISCOUNT, taxPercentage=)", summaryRow0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void testIsDiscountReturningFalse()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow0.isDiscount();
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=774, subTotal=, subTotalBeforeVat=, originalSubTotal=774, type=TICKET, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testIsDiscount1()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2661), (String) null, (String) null, (-2661), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow0.isDiscount();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2661, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2661, type=PROMOTION_CODE, taxPercentage=null)", summaryRow0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void testGetDescriptionForPaymentReturningNonEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, "");
      String string0 = summaryRow0.getDescriptionForPayment();
      assertEquals(774, summaryRow0.getOriginalSubTotal());
      assertEquals("774 x ", string0);
  }

  @Test
  public void testGetDescriptionForPaymentReturningEmptyString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), summaryRow_SummaryType0, (String) null);
      String string0 = summaryRow0.getDescriptionForPayment();
      assertEquals("", string0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2643, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2643, type=PROMOTION_CODE, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningTrue0()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 778, "", "", 778, summaryRow_SummaryType0, "");
      SummaryRow summaryRow1 = new SummaryRow("", "", "", 778, "", "", 778, summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=778, subTotal=, subTotalBeforeVat=, originalSubTotal=778, type=TICKET, taxPercentage=)", summaryRow1.toString());
      assertTrue(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse4()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2646), (String) null, (String) null, (-2646), summaryRow_SummaryType0, (String) null);
      SummaryRow.SummaryType summaryRow_SummaryType1 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2646), (String) null, (String) null, (-2646), summaryRow_SummaryType1, (String) null);
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2646, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2646, type=SUBSCRIPTION, taxPercentage=null)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse5()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.PROMOTION_CODE;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), (SummaryRow.SummaryType) null, (String) null);
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2643, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2643, type=null, taxPercentage=null)", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningTrue1()  throws Throwable  {
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), (SummaryRow.SummaryType) null, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), (SummaryRow.SummaryType) null, (String) null);
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2643, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2643, type=null, taxPercentage=null)", summaryRow1.toString());
      assertTrue(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse6()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow("lUBH|Ha;P7", "lUBH|Ha;P7", "lUBH|Ha;P7", (-2643), "lUBH|Ha;P7", "lUBH|Ha;P7", (-2643), summaryRow_SummaryType0, "lUBH|Ha;P7");
      SummaryRow summaryRow1 = new SummaryRow("lUBH|Ha;P7", "lUBH|Ha;P7", "lUBH|Ha;P7", (-2643), "lUBH|Ha;P7", "GSTmD%:k3+<g,RC(", (-2643), summaryRow_SummaryType0, "GSTmD%:k3+<g,RC(");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=lUBH|Ha;P7, price=lUBH|Ha;P7, priceBeforeVat=lUBH|Ha;P7, amount=-2643, subTotal=lUBH|Ha;P7, subTotalBeforeVat=GSTmD%:k3+<g,RC(, originalSubTotal=-2643, type=TAX_DETAIL, taxPercentage=GSTmD%:k3+<g,RC()", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse7()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, 1507, (String) null, (String) null, 1507, summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, 1507, (String) null, "`", 1507, summaryRow_SummaryType0, "5!}s");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=1507, subTotal=null, subTotalBeforeVat=`, originalSubTotal=1507, type=DYNAMIC_DISCOUNT, taxPercentage=5!}s)", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse8()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 778, "", "", 778, summaryRow_SummaryType0, "");
      SummaryRow summaryRow1 = new SummaryRow("", "", "", 778, "hhyX:", "", 778, summaryRow_SummaryType0, "AK8|,^3Vuj");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=778, subTotal=hhyX:, subTotalBeforeVat=, originalSubTotal=778, type=TICKET, taxPercentage=AK8|,^3Vuj)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse9()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2665), (String) null, (String) null, (-2665), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2665), "2", "2", (-2665), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2665, subTotal=2, subTotalBeforeVat=2, originalSubTotal=-2665, type=DYNAMIC_DISCOUNT, taxPercentage=null)", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse10()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2668), (String) null, (String) null, (-2668), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, "FCw~I6KOTUPeS zG$", (-2668), (String) null, "FCw~I6KOTUPeS zG$", (-2668), summaryRow_SummaryType0, "FCw~I6KOTUPeS zG$");
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=FCw~I6KOTUPeS zG$, amount=-2668, subTotal=null, subTotalBeforeVat=FCw~I6KOTUPeS zG$, originalSubTotal=-2668, type=DYNAMIC_DISCOUNT, taxPercentage=FCw~I6KOTUPeS zG$)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse11()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TAX_DETAIL;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2670), (String) null, (String) null, (-2670), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, "Bv;96=;aLPFS6.", (-2670), (String) null, (String) null, (-2670), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertFalse(summaryRow1.equals((Object)summaryRow0));
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=Bv;96=;aLPFS6., amount=-2670, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2670, type=TAX_DETAIL, taxPercentage=null)", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse12()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, ">`U}h9", 6, ">`U}h9", ">`U}h9", 6, summaryRow_SummaryType0, ">`U}h9");
      SummaryRow summaryRow1 = new SummaryRow((String) null, ">`U}h9", "d0d`TnWIY'FV9`GT#c", 6, "d0d`TnWIY'FV9`GT#c", "d0d`TnWIY'FV9`GT#c", 6, summaryRow_SummaryType0, "AB");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=null, price=>`U}h9, priceBeforeVat=d0d`TnWIY'FV9`GT#c, amount=6, subTotal=d0d`TnWIY'FV9`GT#c, subTotalBeforeVat=d0d`TnWIY'FV9`GT#c, originalSubTotal=6, type=APPLIED_SUBSCRIPTION, taxPercentage=AB)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse13()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 778, "", "N3X~e3l", 778, summaryRow_SummaryType0, "N3X~e3l");
      SummaryRow summaryRow1 = new SummaryRow("N3X~e3l", "", "", 778, "N3X~e3l", "", 778, summaryRow_SummaryType0, "N3X~e3l");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=N3X~e3l, price=, priceBeforeVat=, amount=778, subTotal=N3X~e3l, subTotalBeforeVat=, originalSubTotal=778, type=TICKET, taxPercentage=N3X~e3l)", summaryRow1.toString());
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=778, subTotal=, subTotalBeforeVat=N3X~e3l, originalSubTotal=778, type=TICKET, taxPercentage=N3X~e3l)", summaryRow0.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse14()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2624), (String) null, (String) null, (-2624), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow("6nLG", (String) null, "6nLG", (-2624), (String) null, "6nLG", (-2624), summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertEquals("SummaryRow(name=6nLG, price=null, priceBeforeVat=6nLG, amount=-2624, subTotal=null, subTotalBeforeVat=6nLG, originalSubTotal=-2624, type=SUBSCRIPTION, taxPercentage=null)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse15()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, "");
      SummaryRow summaryRow1 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=774, subTotal=, subTotalBeforeVat=, originalSubTotal=774, type=TICKET, taxPercentage=null)", summaryRow1.toString());
      assertFalse(boolean0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse16()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2628), (String) null, (String) null, (-2628), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2628), (String) null, (String) null, 3032, summaryRow_SummaryType0, (String) null);
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(summaryRow1.equals((Object)summaryRow0));
      assertFalse(boolean0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2628, subTotal=null, subTotalBeforeVat=null, originalSubTotal=3032, type=SUBSCRIPTION, taxPercentage=null)", summaryRow1.toString());
  }

  @Test
  public void testEqualsAndEqualsReturningFalse17()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.DYNAMIC_DISCOUNT;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 0, "3|t", "y$('O_C3=", 0, summaryRow_SummaryType0, "3|t");
      SummaryRow summaryRow1 = new SummaryRow("{GM-", "", "MIG|ds|Hmwyn`2Zk:&_", (-1730), "1Ps", "!!=S=PU", 0, summaryRow_SummaryType0, "MIG|ds|Hmwyn`2Zk:&_");
      boolean boolean0 = summaryRow0.equals(summaryRow1);
      assertFalse(boolean0);
      assertEquals("SummaryRow(name={GM-, price=, priceBeforeVat=MIG|ds|Hmwyn`2Zk:&_, amount=-1730, subTotal=1Ps, subTotalBeforeVat=!!=S=PU, originalSubTotal=0, type=DYNAMIC_DISCOUNT, taxPercentage=MIG|ds|Hmwyn`2Zk:&_)", summaryRow1.toString());
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=0, subTotal=3|t, subTotalBeforeVat=y$('O_C3=, originalSubTotal=0, type=DYNAMIC_DISCOUNT, taxPercentage=3|t)", summaryRow0.toString());
  }

  @Test
  public void testEqualsWithNonNull()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.APPLIED_SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", (-3233), "", "", (-2376), summaryRow_SummaryType0, "");
      Object object0 = new Object();
      boolean boolean0 = summaryRow0.equals(object0);
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=-3233, subTotal=, subTotalBeforeVat=, originalSubTotal=-2376, type=APPLIED_SUBSCRIPTION, taxPercentage=)", summaryRow0.toString());
      assertFalse(boolean0);
  }

//  @Test
//  public void testEqualsAndEqualsReturningTrue2()  throws Throwable  {
//      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
//      SummaryRow summaryRow0 = new SummaryRow("", "", "", 778, "", "", 778, summaryRow_SummaryType0, "");
//      boolean boolean0 = summaryRow0.equals(summaryRow0);
//      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=778, subTotal=, subTotalBeforeVat=, originalSubTotal=778, type=TICKET, taxPercentage=)", summaryRow0.toString());
//      assertTrue(boolean0);
//  }

  @Test
  public void testHashCode1()  throws Throwable  {
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2643), (String) null, (String) null, (-2643), (SummaryRow.SummaryType) null, (String) null);
      summaryRow0.hashCode();
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2643, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2643, type=null, taxPercentage=null)", summaryRow0.toString());
  }

  @Test
  public void testHashCode2()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, "");
      summaryRow0.hashCode();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=774, subTotal=, subTotalBeforeVat=, originalSubTotal=774, type=TICKET, taxPercentage=)", summaryRow0.toString());
  }

  @Test
  public void testToString()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.TICKET;
      SummaryRow summaryRow0 = new SummaryRow("", "", "", 774, "", "", 774, summaryRow_SummaryType0, "");
      String string0 = summaryRow0.toString();
      assertEquals("SummaryRow(name=, price=, priceBeforeVat=, amount=774, subTotal=, subTotalBeforeVat=, originalSubTotal=774, type=TICKET, taxPercentage=)", string0);
  }

  @Test
  public void testEqualsAndEqualsReturningFalse18()  throws Throwable  {
      SummaryRow.SummaryType summaryRow_SummaryType0 = SummaryRow.SummaryType.SUBSCRIPTION;
      SummaryRow summaryRow0 = new SummaryRow((String) null, (String) null, (String) null, (-2629), (String) null, (String) null, (-2629), summaryRow_SummaryType0, (String) null);
      SummaryRow summaryRow1 = new SummaryRow((String) null, (String) null, (String) null, (-2629), (String) null, (String) null, (-2629), summaryRow_SummaryType0, "");
      boolean boolean0 = summaryRow1.equals(summaryRow0);
      assertEquals("SummaryRow(name=null, price=null, priceBeforeVat=null, amount=-2629, subTotal=null, subTotalBeforeVat=null, originalSubTotal=-2629, type=SUBSCRIPTION, taxPercentage=)", summaryRow1.toString());
      assertFalse(boolean0);
  }
}
