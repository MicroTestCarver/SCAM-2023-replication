/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 17:51:06 GMT 2023
 */

package alfio.model;

import org.junit.Test;
import static org.junit.Assert.*;
import alfio.model.PaymentInformation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentInformation_ESTest extends PaymentInformation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testIsFullyRefundedReturningFalse()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", (String) null, "", (String) null);
      boolean boolean0 = paymentInformation0.isFullyRefunded();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetRefundedAmountReturningNonEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("-cM`", "-cM`", "-cM`", "-cM`");
      String string0 = paymentInformation0.getRefundedAmount();
      assertEquals("-cM`", string0);
  }

  @Test(timeout = 4000)
  public void testGetRefundedAmountReturningEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", "", "", "Lro>S");
      String string0 = paymentInformation0.getRefundedAmount();
      assertEquals("", string0);
      assertEquals("Lro>S", paymentInformation0.getPlatformFee());
      assertEquals("", paymentInformation0.getFee());
      assertEquals("", paymentInformation0.getPaidAmount());
  }

  @Test(timeout = 4000)
  public void testGetPlatformFeeReturningNull()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", (String) null, "", (String) null);
      String string0 = paymentInformation0.getPlatformFee();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetPlatformFeeReturningNonEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("-cM`", "-cM`", "-cM`", "-cM`");
      String string0 = paymentInformation0.getPlatformFee();
      assertEquals("-cM`", string0);
  }

  @Test(timeout = 4000)
  public void testGetPaidAmountReturningNull()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation((String) null, "", "", "X&!*>>9{3k");
      String string0 = paymentInformation0.getPaidAmount();
      assertEquals("X&!*>>9{3k", paymentInformation0.getPlatformFee());
      assertEquals("", paymentInformation0.getRefundedAmount());
      assertNull(string0);
      assertEquals("", paymentInformation0.getFee());
  }

  @Test(timeout = 4000)
  public void testGetPaidAmountReturningNonEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("-cM`", "-cM`", "-cM`", "-cM`");
      String string0 = paymentInformation0.getPaidAmount();
      assertEquals("-cM`", string0);
  }

  @Test(timeout = 4000)
  public void testGetFeeReturningNull()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("|~7U5~b>`8E!YF", "", (String) null, "");
      String string0 = paymentInformation0.getFee();
      assertNull(string0);
      assertEquals("", paymentInformation0.getRefundedAmount());
      assertEquals("", paymentInformation0.getPlatformFee());
      assertEquals("|~7U5~b>`8E!YF", paymentInformation0.getPaidAmount());
  }

  @Test(timeout = 4000)
  public void testGetFeeReturningNonEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("-cM`", "-cM`", "-cM`", "-cM`");
      String string0 = paymentInformation0.getFee();
      assertEquals("-cM`", string0);
  }

  @Test(timeout = 4000)
  public void testIsFullyRefundedReturningTrue()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", "", "", "");
      boolean boolean0 = paymentInformation0.isFullyRefunded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetRefundedAmountReturningNull()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", (String) null, "", (String) null);
      String string0 = paymentInformation0.getRefundedAmount();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetFeeReturningEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", "", "", "");
      String string0 = paymentInformation0.getFee();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testGetPlatformFeeReturningEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", "", "", "");
      String string0 = paymentInformation0.getPlatformFee();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testGetPaidAmountReturningEmptyString()  throws Throwable  {
      PaymentInformation paymentInformation0 = new PaymentInformation("", "", "", "");
      String string0 = paymentInformation0.getPaidAmount();
      assertEquals("", string0);
  }
}
