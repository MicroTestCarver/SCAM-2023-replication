/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 22:53:49 GMT 2023
 */

package alfio.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alfio.model.CustomerName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CustomerName_ESTest extends CustomerName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testToStringReturningNull()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("", "D]</X>q+V_6*4.", "", false, false);
      String string0 = customerName0.toString();
      assertNull(string0);
      assertFalse(customerName0.isHasFirstAndLastName());
  }

  @Test(timeout = 4000)
  public void testIsHasFirstAndLastNameReturningTrue()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("fullName must not be null", "%lF>TAak~", "", true, false);
      boolean boolean0 = customerName0.isHasFirstAndLastName();
      assertEquals("%lF>TAak~ ", customerName0.getFullName());
      assertEquals("%lF>TAak~ null", customerName0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningNull()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("fullName must not be null", "%lF>TAak~", "", true, false);
      customerName0.getLastName();
      assertEquals("%lF>TAak~ null", customerName0.toString());
      assertEquals("%lF>TAak~ ", customerName0.getFullName());
  }

  @Test(timeout = 4000)
  public void testGetFullNameReturningNull()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("", "D]</X>q+V_6*4.", "", false, false);
      String string0 = customerName0.getFullName();
      assertNull(string0);
      assertFalse(customerName0.isHasFirstAndLastName());
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNull()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("", "", "R", false, false);
      String string0 = customerName0.getFirstName();
      assertNull(string0);
      assertFalse(customerName0.isHasFirstAndLastName());
  }

  @Test(timeout = 4000)
  public void testFailsToCreateCustomerNameTaking5ArgumentsThrowsIllegalArgumentException()  throws Throwable  {
      CustomerName customerName0 = null;
      try {
        customerName0 = new CustomerName("", "", "", true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // firstName must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void testCreatesCustomerNameTaking5ArgumentsAndCallsToString0()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("?aE)C/Q<o,", "?aE)C/Q<o,", "?aE)C/Q<o,", false, false);
      String string0 = customerName0.toString();
      assertEquals("?aE)C/Q<o,", string0);
  }

  @Test(timeout = 4000)
  public void testFailsToCreateCustomerNameTaking4ArgumentsThrowsIllegalArgumentException0()  throws Throwable  {
      CustomerName customerName0 = null;
      try {
        customerName0 = new CustomerName("", "", "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fullName must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void testFailsToCreateCustomerNameTaking4ArgumentsThrowsIllegalArgumentException1()  throws Throwable  {
      CustomerName customerName0 = null;
      try {
        customerName0 = new CustomerName((String) null, "p{InCombiningDiacriticalMarks}+", (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lastName must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void testCreatesCustomerNameTaking5ArgumentsAndCallsToString1()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("fullName must not be null", "%lF>TAak~", "", true, false);
      String string0 = customerName0.toString();
      assertEquals("%lF>TAak~ null", string0);
      assertEquals("%lF>TAak~ ", customerName0.getFullName());
  }

  @Test(timeout = 4000)
  public void testGetFullNameReturningNonEmptyString()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("s", "s", "s", false);
      String string0 = customerName0.getFullName();
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNonEmptyString()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("D0", "D0", "D0", true);
      customerName0.getFirstName();
      assertEquals("D0 D0", customerName0.getFullName());
  }

  @Test(timeout = 4000)
  public void testIsHasFirstAndLastNameReturningFalse()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d", false);
      boolean boolean0 = customerName0.isHasFirstAndLastName();
      assertEquals("Minimum abbreviation width is %d", customerName0.getFullName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningNonEmptyString()  throws Throwable  {
      CustomerName customerName0 = new CustomerName("D0", "D0", "D0", true);
      customerName0.getLastName();
      assertEquals("D0 D0", customerName0.getFullName());
  }
}
