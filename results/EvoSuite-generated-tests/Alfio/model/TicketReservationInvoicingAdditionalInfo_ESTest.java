/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 23:34:28 GMT 2023
 */

package alfio.model;

import org.junit.Test;
import static org.junit.Assert.*;
import alfio.model.TicketReservationInvoicingAdditionalInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TicketReservationInvoicingAdditionalInfo_ESTest extends TicketReservationInvoicingAdditionalInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetItalianEInvoicingReturningNull()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo((TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing) null);
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = ticketReservationInvoicingAdditionalInfo0.getItalianEInvoicing();
      assertNull(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
  }

  @Test(timeout = 4000)
  public void testGetItalianEInvoicingReturningTicketReservationInvoicingAdditionalInfo$ItalianEInvoicingWhereIsSplitPaymentIsFalse()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1 = ticketReservationInvoicingAdditionalInfo0.getItalianEInvoicing();
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.isSplitPayment());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.getFiscalCode());
      assertEquals("<*6`s3Yn]n}g", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.getAddresseeCode());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.getPec());
  }

  @Test(timeout = 4000)
  public void testGetItalianEInvoicing()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, "", "", true);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1 = ticketReservationInvoicingAdditionalInfo0.getItalianEInvoicing();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsIsEmpty0()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "l5CMWNrnMuLGG}hs1", (String) null, false);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isEmpty();
      assertEquals("", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertEquals("l5CMWNrnMuLGG}hs1", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode());
      assertFalse(boolean0);
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsIsEmpty1()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, (String) null, (String) null, true);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isEmpty();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsIsEmpty2()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, (String) null, "", true);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isEmpty();
      assertFalse(boolean0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesTicketReservationInvoicingAdditionalInfoTakingTicketReservationInvoicingAdditionalInfo$ItalianEInvoicing()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo((TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing) null);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testIsEmptyReturningFalse()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, (String) null, "", true);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo0.isEmpty();
      assertFalse(boolean0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsIsEmpty3()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, "", "", true);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isEmpty();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsIsEmpty4()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "", "", true);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isEmpty();
      assertFalse(boolean0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsGetReference0()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.PEC;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, (String) null, (String) null, false);
      ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReference();
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsGetReference1()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("|YN-@F8MoOxCy", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, (String) null, "|YN-@F8MoOxCy", true);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReference();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsGetReference2()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReference();
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec());
      assertNull(string0);
      assertEquals("<*6`s3Yn]n}g", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsGetReferenceTypeAsString0()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("<o", (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, "<o", (String) null, true);
      ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReferenceTypeAsString();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testCreatesItalianEInvoicingTaking5ArgumentsAndCallsGetReferenceTypeAsString1()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "l5CMWNrnMuLGG}hs1", (String) null, false);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReferenceTypeAsString();
      assertEquals("", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertEquals("ADDRESSEE_CODE", string0);
      assertEquals("l5CMWNrnMuLGG}hs1", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReference());
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testIsEmpty()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, (String) null, (String) null, true);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo0.isEmpty();
      assertTrue(boolean0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testGetEmptyReturningTrue()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo((TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing) null);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo0.getEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testIsSplitPayment()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment();
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertEquals("<*6`s3Yn]n}g", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testGetAddresseeCode()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode();
      assertEquals("<*6`s3Yn]n}g", string0);
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec());
  }

  @Test(timeout = 4000)
  public void testGetReferenceType()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getReferenceType();
      assertEquals("<*6`s3Yn]n}g", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec());
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
  }

  @Test(timeout = 4000)
  public void testGetFiscalCode()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("|YN-@F8MoOxCy", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, (String) null, "|YN-@F8MoOxCy", true);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode();
      assertNotNull(string0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testGetPec()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.ADDRESSEE_CODE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("|YN-@F8MoOxCy", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, (String) null, "|YN-@F8MoOxCy", true);
      String string0 = ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec();
      assertNotNull(string0);
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
  }

  @Test(timeout = 4000)
  public void testGetEmptyReturningFalse()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0 = TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType.NONE;
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing_ReferenceType0, "<*6`s3Yn]n}g", "p87XT28WJRgN", false);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      boolean boolean0 = ticketReservationInvoicingAdditionalInfo0.getEmpty();
      assertFalse(boolean0);
      assertFalse(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.isSplitPayment());
      assertEquals("<*6`s3Yn]n}g", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getAddresseeCode());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getFiscalCode());
      assertEquals("p87XT28WJRgN", ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0.getPec());
  }

  @Test(timeout = 4000)
  public void testGetItalianEInvoicingReturningTicketReservationInvoicingAdditionalInfo$ItalianEInvoicingWhereIsEmptyIsTrue()  throws Throwable  {
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0 = new TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing((String) null, (TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing.ReferenceType) null, (String) null, (String) null, true);
      TicketReservationInvoicingAdditionalInfo ticketReservationInvoicingAdditionalInfo0 = new TicketReservationInvoicingAdditionalInfo(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing0);
      TicketReservationInvoicingAdditionalInfo.ItalianEInvoicing ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1 = ticketReservationInvoicingAdditionalInfo0.getItalianEInvoicing();
      assertTrue(ticketReservationInvoicingAdditionalInfo_ItalianEInvoicing1.isSplitPayment());
  }
}
