/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 00:42:49 GMT 2023
 */

package alfio.manager;

import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import alfio.manager.EventNameManager;
import alfio.repository.EventAdminRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventNameManager_ESTest extends EventNameManager_ESTest_scaffolding {

  @Test
  public void testIsUniqueThrowsNullPointerException()  throws Throwable  {
      EventNameManager eventNameManager0 = new EventNameManager((EventAdminRepository) null);
      // Undeclared exception!
      try { 
        eventNameManager0.isUnique("select coalesce(current_setting('alfio.checkRowAccess', true(, 'false') = 'true'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.manager.EventNameManager", e);
      }
  }

  @Test
  public void testGenerateShortNameThrowsNullPointerException()  throws Throwable  {
      EventNameManager eventNameManager0 = new EventNameManager((EventAdminRepository) null);
      // Undeclared exception!
      try { 
        eventNameManager0.generateShortName("The value %s is not in the specified inclusive range of %s to %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("alfio.manager.EventNameManager", e);
      }
  }

//  @Test
//  public void testGenerateShortNameThrowsIndexOutOfBoundsException()  throws Throwable  {
//      EventAdminRepository eventAdminRepository0 = mock(EventAdminRepository.class, new ViolatedAssumptionAnswer());
//      doReturn(true, true, false, false, true).when(eventAdminRepository0).existsBySlug(anyString());
//      EventNameManager eventNameManager0 = new EventNameManager(eventAdminRepository0);
//      eventNameManager0.generateShortName("REQUIRES_NEW");
//      eventNameManager0.generateShortName("requiresnew");
//      Random.setNextRandom(Integer.MIN_VALUE);
//      // Undeclared exception!
//      try {
//        eventNameManager0.generateShortName("requiresnew");
//        fail("Expecting exception: IndexOutOfBoundsException");
//
//      } catch(IndexOutOfBoundsException e) {
//      }
//  }

  @Test
  public void testIsUniqueReturningTrue()  throws Throwable  {
      EventAdminRepository eventAdminRepository0 = mock(EventAdminRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(eventAdminRepository0).existsBySlug(anyString());
      EventNameManager eventNameManager0 = new EventNameManager(eventAdminRepository0);
      boolean boolean0 = eventNameManager0.isUnique((String) null);
      assertTrue(boolean0);
  }

  @Test
  public void testGenerateShortNameReturningEmptyString()  throws Throwable  {
      EventAdminRepository eventAdminRepository0 = mock(EventAdminRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(eventAdminRepository0).existsBySlug(anyString());
      EventNameManager eventNameManager0 = new EventNameManager(eventAdminRepository0);
      String string0 = eventNameManager0.generateShortName("5{u6*G^by8WQsN");
      assertEquals("", string0);
  }

  @Test
  public void testIsUniqueReturningFalse()  throws Throwable  {
      EventAdminRepository eventAdminRepository0 = mock(EventAdminRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(eventAdminRepository0).existsBySlug(anyString());
      EventNameManager eventNameManager0 = new EventNameManager(eventAdminRepository0);
      boolean boolean0 = eventNameManager0.isUnique("The validated character sequence is blank");
      assertFalse(boolean0);
      
      String string0 = eventNameManager0.generateShortName("1 &/^k/");
      assertEquals("1----k-", string0);
  }

  @Test
  public void testGenerateShortNameThrowsIllegalArgumentException()  throws Throwable  {
      EventAdminRepository eventAdminRepository0 = mock(EventAdminRepository.class, new ViolatedAssumptionAnswer());
      EventNameManager eventNameManager0 = new EventNameManager(eventAdminRepository0);
      // Undeclared exception!
      try { 
        eventNameManager0.generateShortName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
