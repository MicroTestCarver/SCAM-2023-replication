/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 05 09:49:33 GMT 2022
 */

package example.person;

import org.junit.Test;
import static org.junit.Assert.*;
import example.person.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetLastNameReturningNull()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningEmptyString()  throws Throwable  {
      Person person0 = new Person("", "");
      String string0 = person0.getLastName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNull()  throws Throwable  {
      Person person0 = new Person();
      String string0 = person0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningEmptyString()  throws Throwable  {
      Person person0 = new Person("", "");
      String string0 = person0.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void testCreatesPersonTakingNoArguments0()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person();
      boolean boolean0 = person0.equals(person1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testCreatesPersonTakingNoArgumentsAndCreatesPersonTaking2Arguments()  throws Throwable  {
      Person person0 = new Person();
      Person person1 = new Person((String) null, "{Ut}lp>JP0");
      boolean boolean0 = person0.equals(person1);
      assertFalse(boolean0);
      assertEquals("Person{id='0', firstName='null', lastName='{Ut}lp>JP0'}", person1.toString());
  }

  @Test(timeout = 4000)
  public void testCreatesPersonTaking2Arguments0()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      boolean boolean0 = person0.equals("Kt(tyZA._U*Ce4A");
      assertEquals("Person{id='0', firstName='Kt(tyZA._U*Ce4A', lastName='OM&}X$I!~QDSaIxi'}", person0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testEqualsWithNull()  throws Throwable  {
      Person person0 = new Person();
      boolean boolean0 = person0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testCreatesPersonTakingNoArguments1()  throws Throwable  {
      Person person0 = new Person();
      boolean boolean0 = person0.equals(person0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testCreatesPersonTaking2Arguments1()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      Person person1 = new Person("XS~*j;xHDF/,r", "OM&}X$I!~QDSaIxi");
      boolean boolean0 = person0.equals(person1);
      assertFalse(boolean0);
      assertEquals("OM&}X$I!~QDSaIxi", person1.getLastName());
  }

  @Test(timeout = 4000)
  public void testToString()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      String string0 = person0.toString();
      assertEquals("Person{id='0', firstName='Kt(tyZA._U*Ce4A', lastName='OM&}X$I!~QDSaIxi'}", string0);
  }

  @Test(timeout = 4000)
  public void testGetFirstNameReturningNonEmptyString()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      person0.getFirstName();
      assertEquals("Person{id='0', firstName='Kt(tyZA._U*Ce4A', lastName='OM&}X$I!~QDSaIxi'}", person0.toString());
  }

  @Test(timeout = 4000)
  public void testHashCode()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      person0.hashCode();
      assertEquals("Person{id='0', firstName='Kt(tyZA._U*Ce4A', lastName='OM&}X$I!~QDSaIxi'}", person0.toString());
  }

  @Test(timeout = 4000)
  public void testGetLastNameReturningNonEmptyString()  throws Throwable  {
      Person person0 = new Person("Kt(tyZA._U*Ce4A", "OM&}X$I!~QDSaIxi");
      person0.getLastName();
      assertEquals("Person{id='0', firstName='Kt(tyZA._U*Ce4A', lastName='OM&}X$I!~QDSaIxi'}", person0.toString());
  }

  @Test(timeout = 4000)
  public void testGetId()  throws Throwable  {
      Person person0 = new Person();
      int int0 = person0.getId();
      assertEquals(0, int0);
  }
}
